TREE_BUILDING_ENABLED = false;
PARSER_PACKAGE=org.parsers.csharp.pphelper;

INCLUDE "CSharpIdentifierDef.javacc"

INJECT PARSER_CLASS : 
   import java.util.HashSet;
   import java.util.Set;
{
    private Set<String> symbols = new HashSet<>();

    static public boolean evaluate(String input, Set<String> symbols) throws ParseException {
        PARSER_CLASS parser = new PARSER_CLASS(input);
        return parser.Expression();
    }
}

TOKEN :
  <IDENTIFIER : <CSHARP_IDENTIFIER_START> (<CSHARP_IDENTIFIER_PART>)*>
  |
  <TRUE : "true">
  |
  <FALSE : "false">
  |
  <OR : "||">
  |
  <AND : "&&">
  |
  <LPAREN : "(">
  |
  <RPAREN : ")">
  |
  <NOT : "!">
  |
  <EQUALS : "==">
  |
  <NOT_EQUALS : "!=">
;

boolean Expression :
    {boolean inequality = false, result, result2;}
    result=OrExpression
    [
        ("==" | "!=" {inequality = true;})
        result2=OrExpression
        {result = inequality ? result != result2 : result == result2;}
    ]
    { return result;}
;

boolean OrExpression :
    {boolean result, result2;}
    result=AndExpression 
    [
        "||"
        result2=AndExpression
        {result = result && result2;}
    ]
    {return result;}
;

boolean AndExpression :
    {boolean result, result2;}
    result=NotExpression
    [
        "&&"
        result2 = NotExpression
        {result = result && result2;}
    ]
    {return result;}
;

boolean NotExpression :
    {boolean not = false, result;}
    ["!" {not = true;}]
    result=PrimaryExpression
    {return not ? !result : result;}
;

boolean PrimaryExpression :
    {boolean result = false;}
    (
      <IDENTIFIER> {result = symbols.contains(lastConsumedToken.getImage());}
      |
      "(" result=Expression ")"
    )
    {return result;}
;