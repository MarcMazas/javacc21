DEFAULT_LEXICAL_STATE=CSHARP;
CSHARP_UNICODE_ESCAPE;
PARSER_PACKAGE=org.parsers.csharplexer;


SKIP :
  <WHITESPACE : (<WS_CHAR>)+> #Whitespace
  |
  <#WS_CHAR : 
       [
         " ", "\t", "\n", "\r", 
         "\u000b", "\u00a0", "\u1680",
         "\u2000"-"\u200a",
         "\u202f", "\u205f", "\u3000"
       ]
  >
;


<IN_MULTI_LINE_COMMENT>
UNPARSED :
  <MULTI_LINE_COMMENT: "*/" > #Comment : CSHARP
;

MORE : 
  "//" : IN_SINGLE_LINE_COMMENT
  |
  "/*" : IN_MULTI_LINE_COMMENT
;

<IN_SINGLE_LINE_COMMENT>
UNPARSED :
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > #Comment : CSHARP
;


<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
  < ~[] >
;

TOKEN #Literal :
  < INTEGER_LITERAL: (<DECIMAL_LITERAL> | <HEX_LITERAL>) (<INTEGER_TYPE_SUFFIX>)?> #IntegerLiteral
  |
  < #DECIMAL_LITERAL: ["0"-"9"]((["0"-"9","_"])*["0"-"9"])?>
  |
  < #HEX_LITERAL: "0" ["x","X"] <HEX_DIGITS>>
  | 
  < #INTEGER_TYPE_SUFFIX : "U" | "u" | "L" | "l" | "UL" | "Ul" | "uL" | "ul"| "LU" | "Lu" | "lU" | "lu">
  |
  < #HEX_DIGITS: ["0"-"9","a"-"f","A"-"F"]((["0"-"9","a"-"f","A"-"F","_"])*["0"-"9","a"-"f","A"-"F"])? >
  |
  < REAL_LITERAL:
     (<DECIMAL_LITERAL>)? "." <DECIMAL_LITERAL> (<EXPONENT_PART>)? (["f","F","d","D"])?
  > #RealLiteral
  |
  < #EXPONENT_PART : ["e","E"] (["+","-"])? <DECIMAL_LITERAL> >
  |
  < CHARACTER_LITERAL: "'" ((~["'","\\","\n","\r"]) | <ESCAPED_CHAR>) "'"> #CharacterLiteral
  |
  < #ESCAPED_CHAR :  "\\"
                    (
                      (["0","a","b","f","n", "r","t","v","\\","'","\""])
                      |
                      "x" (["0"-"9", "a"-"f", "A"-"F"]){1,4}
                    ) 
  >                                                  
  |
  < STRING_LITERAL: <REGULAR_STRING_LITERAL>|<VERBATIM_STRING_LITERAL>> #StringLiteral
  |
  // TODO. This is not really correct.
  < INTERPOLATED_STRING_LITERAL : "$" (<REGULAR_STRING_LITERAL>|<VERBATIM_STRING_LITERAL>)> #InterpolatedStringLiteral
  |
  < #REGULAR_STRING_LITERAL : "\"" ((~["\"","\\","\n","\r"]) | <ESCAPED_CHAR>)*  "\"">
  |
  < #VERBATIM_STRING_LITERAL : "@\"" (~["\""] | "\"\"")* "\"" > 
  |
  < FALSE : "false" > #BooleanLiteral
  |
  < TRUE : "true"> #BooleanLiteral
  | 
  < NULL : "null" > #NullLiteral
;

TOKEN #Delimiter :
  < LPAREN: "(" > 
| < RPAREN: ")" >
| < LBRACE: "{" > 
| < RBRACE: "}" > 
| < LBRACKET: "[" > 
| < RBRACKET: "]" > 
| < SEMICOLON: ";" > 
| < COMMA: "," > 
| < DOT: "." > 
| < ASSIGN: "=" > 
| < DOUBLE_COLON: "::" > 
| < VAR_ARGS: "..." > 
| < AT : "@"> 
;

TOKEN #Operator : 
 < GT: ">" > 
| < LT: "<" > 
| < BANG: "!" > 
| < TILDE: "~" > 
| < HOOK: "?" > 
| < COLON: ":" > 
| < EQ: "==" > 
| < LE: "<=" > 
| < GE: ">=" > 
| < NE: "!=" > 
| < SC_OR: "||" > 
| < SC_AND: "&&" > 
| < INCR: "++" > 
| < DECR: "--" > 
| < PLUS: "+" > 
| < MINUS: "-" > 
| < STAR: "*" > 
| < SLASH: "/" > 
| < BIT_AND: "&" > 
| < BIT_OR: "|" > 
| < XOR: "^" > 
| < REM: "%" > 
| < LSHIFT: "<<" > 
| < PLUSASSIGN: "+=" > 
| < MINUSASSIGN: "-=" > 
| < STARASSIGN: "*=" > 
| < SLASHASSIGN: "/=" > 
| < ANDASSIGN: "&=" > 
| < ORASSIGN: "|=" > 
| < XORASSIGN: "^=" > 
| < REMASSIGN: "%=" > 
| < LEFT_SHIFT_ASSIGN: "<<=" > 
| < RIGHT_SHIFT: ">>" > 
| < RIGHT_SHIFT_ASSIGN: ">>=" > 
| < LAMBDA : "=>"> 
;

// C# Keywords

TOKEN #KeyWord : 
   <ABSTRACT : "abstract" > 
   | < AS : "as" > 
   | < BASE : "base" > 
   | < BOOL : "bool" > 
   | < BREAK : "break" >
   | < BYTE : "byte" > 
   |  <CASE : "case" > 
   | < CATCH : "catch" > 
   | < CHAR : "char" > 
   | < CHECKED : "checked" > 
   | < CLASS : "class" > 
   | < CONST : "const" > 
   | < CONTINUE : "continue" > 
   | < DECIMAL : "decimal" > 
   | < DEFAULT : "default" > 
   | < DELEGATE : "delegate" > 
   | < DO : "do" > 
   | < DOUBLE : "double" > 
   | < ELSE : "else" > 
   | < ENUM : "enum" > 
   | < EVENT : "equals" > 
   | < EXPLICIT : "explicit" > 
   | < EXTERN : "extern" > 
   | < FINALLY : "finally" > 
   | < FIXED : "fixed" > 
   | < FLOAT : "float" > 
   | < FOR : "for" > 
   | < FOREACH : "foreach" > 
   | < GOTO : "goto" > 
   | < IF : "if" > 
   | < IMPLICIT : "implicit" > 
   | < IN : "in" > 
   | < INT : "int" > 
   | < INTERFACE : "interface" > 
   | < INTERNAL : "internal" > 
   | < IS : "is">
   | < LOCK : "lock" >
   | < LONG : "long" >
   | < NAMESPACE : "namespace" >
   | < NEW : "new" >
   | < OBJECT : "object" >
   | < OPERATOR : "operator" >
   | < OUT : "out" >
   | < OVERRIDE : "override" >
   | < PARAMS : "params">
   | < PRIVATE : "private" > 
   | < PROTECTED : "protected" > 
   | < PUBLIC : "public" > 
   | < READONLY : "readonly" > 
   | < REF : "ref" > 
   | < RETURN : "return" > 
   | < SBYTE : "sbyte" > 
   | < SEALED : "sealed" > 
   | < SHORT : "short" > 
   | < SIZEOF : "sizeof" > 
   | < STACKALLOC : "stackalloc" > 
   | < STATIC : "static" > 
   | < STRING : "string" > 
   | < STRUCT : "struct" > 
   | < SWITCH : "switch" > 
   | < THIS : "this" > 
   | < THROW : "throw" > 
   | < TRY : "try" >
   | < TYPEOF : "typeof" >
   | < UINT : "uint" >
   | < ULONG : "ulong" >
   | < UNCHECKED : "unchecked" >
   | < UNSAFE : "unsafe" >
   | < USHORT : "ushort" > 
   | < USING : "using" > 
   | < VIRTUAL : "virtual" > 
   | < VOID : "void" >
   | < VOLATILE : "volatile" > 
   | < WHILE : "while" > 
// Now contextual Keywords
   | < GET : "get" >
   | < SET : "set" >
;

INCLUDE "CSharpIdentifierDef.javacc"

TOKEN :
  <IDENTIFIER : ("@")? <CSHARP_IDENTIFIER_START> (<CSHARP_IDENTIFIER_PART>)*>
;