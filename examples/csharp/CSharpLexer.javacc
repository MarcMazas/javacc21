DEFAULT_LEXICAL_STATE=CSHARP;
CSHARP_UNICODE_ESCAPE;

// The following Token productions are lifted straight from the Java grammar. Should REVISIT

UNPARSED :
  <WHITESPACE : (" "| "\t"| "\n"| "\r"| "\f")+> #Whitespace
;

<IN_MULTI_LINE_COMMENT>
UNPARSED :
  <MULTI_LINE_COMMENT: "*/" > #Comment : CSHARP
;

MORE : 
  "//" : IN_SINGLE_LINE_COMMENT
  |
  <"/**" ~["/"]> { backup(1); } : IN_FORMAL_COMMENT
  |
  "/*" : IN_MULTI_LINE_COMMENT
;

<IN_SINGLE_LINE_COMMENT>
UNPARSED :
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > #Comment : CSHARP
;


<IN_FORMAL_COMMENT>
UNPARSED :
  <FORMAL_COMMENT: "*/" > #DocComment : CSHARP
;

INJECT DocComment : extends Comment;

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
  < ~[] >
;

TOKEN #Literal :
  < LONG_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])
      | <HEX_LITERAL> (["l","L"])
      | <OCTAL_LITERAL> (["l","L"])
      | <BINARY_LITERAL> (["l","L"])
  >
  |
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
      | <BINARY_LITERAL>
  >
  | 
  < #DECIMAL_LITERAL: ["0"-"9"]((["0"-"9","_"])*["0"-"9"])? >
  |
  < #HEX_LITERAL: "0" ["x","X"] <HEX_DIGITS> >
  |
  < #OCTAL_LITERAL: "0" ["0"-"7"]((["0"-"7","_"])*["0"-"7"])? >
  |
  < #BINARY_LITERAL: "0" ["b","B"] ["0","1"]((["0","1","_"])*["0","1"])? >
  |
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
  |
  < #DECIMAL_FLOATING_POINT_LITERAL:
        <DECIMAL_LITERAL> "." (<DECIMAL_LITERAL>)? (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." <DECIMAL_LITERAL> (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | <DECIMAL_LITERAL> <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | <DECIMAL_LITERAL> (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
  |
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (<DECIMAL_LITERAL>)+ >
  |
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        <HEX_LITERAL> (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x","X"] (<HEX_DIGITS>)? "." <HEX_DIGITS> <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
  |
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? <DECIMAL_LITERAL> >
  |
  < #HEX_DIGITS: ["0"-"9","a"-"f","A"-"F"]((["0"-"9","a"-"f","A"-"F","_"])*["0"-"9","a"-"f","A"-"F"])? >
  |
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
  |
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
;

TOKEN #Delimiter :
  < LPAREN: "(" > 
| < RPAREN: ")" >
| < LBRACE: "{" > 
| < RBRACE: "}" > 
| < LBRACKET: "[" > 
| < RBRACKET: "]" > 
| < SEMICOLON: ";" > 
| < COMMA: "," > 
| < DOT: "." > 
| < ASSIGN: "=" > 
| < DOUBLE_COLON: "::" > 
| < VAR_ARGS: "..." > 
| < AT : "@"> 
;

TOKEN #Operator : 
 < GT: ">" > 
| < LT: "<" > 
| < BANG: "!" > 
| < TILDE: "~" > 
| < HOOK: "?" > 
| < COLON: ":" > 
| < EQ: "==" > 
| < LE: "<=" > 
| < GE: ">=" > 
| < NE: "!=" > 
| < SC_OR: "||" > 
| < SC_AND: "&&" > 
| < INCR: "++" > 
| < DECR: "--" > 
| < PLUS: "+" > 
| < MINUS: "-" > 
| < STAR: "*" > 
| < SLASH: "/" > 
| < BIT_AND: "&" > 
| < BIT_OR: "|" > 
| < XOR: "^" > 
| < REM: "%" > 
| < LSHIFT: "<<" > 
| < PLUSASSIGN: "+=" > 
| < MINUSASSIGN: "-=" > 
| < STARASSIGN: "*=" > 
| < SLASHASSIGN: "/=" > 
| < ANDASSIGN: "&=" > 
| < ORASSIGN: "|=" > 
| < XORASSIGN: "^=" > 
| < REMASSIGN: "%=" > 
| < LEFT_SHIFT_ASSIGN: "<<=" > 
|  < RIGHT_SHIFT: ">>" > 
| < RIGHT_SHIFT_ASSIGN: ">>=" > 
| < LAMBDA : "=>"> 
;

// C# Keywords

TOKEN #KeyWord : 
   <ABSTRACT : "abstract" > 
   | < AS : "as" > 
   | < BASE : "base" > 
   | < BOOL : "bool" > 
   | < BREAK : "break" >
   | < BYTE : "byte" > 
   |  <CASE : "case" > 
   | < CATCH : "catch" > 
   | < CHAR : "char" > 
   | < CHECKED : "checked" > 
   | < CLASS : "class" > 
   | < CONST : "const" > 
   | < CONTINUE : "continue" > 
   | < DECIMAL : "decimal" > 
   | < DEFAULT : "default" > 
   | < DELEGATE : "delegate" > 
   | < DO : "do" > 
   | < DOUBLE : "double" > 
   | < ELSE : "else" > 
   | < ENUM : "enum" > 
   | < EVENT : "equals" > 
   | < EXPLICIT : "explicit" > 
   | < EXTERN : "extern" > 
   | < FALSE : "false" > 
   | < FINALLY : "finally" > 
   | < FIXED : "fixed" > 
   | < FLOAT : "float" > 
   | < FOR : "for" > 
   | < FOREACH : "foreach" > 
   | < GOTO : "goto" > 
   | < IF : "if" > 
   | < IMPLICIT : "implicit" > 
   | < IN : "in" > 
   | < INT : "int" > 
   | < INTERFACE : "interface" > 
   | < INTERNAL : "internal" > 
   | < IS : "is">
   | < LOCK : "lock" >
   | < LONG : "long" >
   | < NAMESPACE : "namespace" >
   | < NEW : "new" >
   | < NULL : "null" >
   | < OBJECT : "object" >
   | < OPERATOR : "operator" >
   | < OUT : "out" >
   | < OVERRIDE : "override" >
   | < PARAMS : "params">
   | < PRIVATE : "private" > 
   | < PROTECTED : "protected" > 
   | < PUBLIC : "public" > 
   | < READONLY : "readonly" > 
   | < REF : "ref" > 
   | < RETURN : "return" > 
   | < SBYTE : "sbyte" > 
   | < SEALED : "sealed" > 
   | < SHORT : "short" > 
   | < SIZEOF : "sizeof" > 
   | < STACKALLOC : "stackalloc" > 
   | < STATIC : "static" > 
   | < STRING : "string" > 
   | < STRUCT : "struct" > 
   | < SWITCH : "switch" > 
   | < THIS : "this" > 
   | < THROW : "throw" > 
   | < TRUE : "true" >
   | < TRY : "try" >
   | < TYPEOF : "typeof" >
   | < UINT : "uint" >
   | < ULONG : "ulong" >
   | < UNCHECKED : "unchecked" >
   | < UNSAFE : "unsafe" >
   | < USHORT : "ushort" > 
   | < USING : "using" > 
   | < VIRTUAL : "virtual" > 
   | < VOID : "void" >
   | < VOLATILE : "volatile" > 
   | < WHILE : "while" > 
;

INCLUDE "CSharpIdentifierDef.javacc"

TOKEN :
  <IDENTIFIER : ("@")? <CSHARP_IDENTIFIER_START> (<CSHARP_IDENTIFIER_PART>)*>
;