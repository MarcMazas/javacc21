PARSER_PACKAGE="org.parsers.csharp";
NODE_PACKAGE="org.parsers.csharp.tree";
DEFAULT_LEXICAL_STATE=CSHARP;
TABS_TO_SPACES=4;
ENSURE_FINAL_EOL;

DEACTIVATE_TOKENS=ADD,ASSEMBLY,ASYNC,AWAIT,GET,INTO,MODULE,PARTIAL,
                  REMOVE,SET,VAR,WHEN,YIELD,
                  // The following are all used in queries                  
                  ASCENDING,BY,DESCENDING,EQUALS,FROM,GROUP,JOIN,LET,
                  INTO, ORDERBY,SELECT,WHERE;

INCLUDE "CSharpLexer.javacc"

INJECT PARSER_CLASS :
   import PARSER_PACKAGE.preprocessor.PreprocessorParser; 
{
   public PARSER_CLASS(Path path, boolean usePreprocessor) throws IOException {
      this(path);
      if (usePreprocessor) {
         try {
            PreprocessorParser ppp = new PreprocessorParser(path, null, false);
            java.util.BitSet lineMarkers = ppp.PP_Root();
            token_source.setParsedLines(lineMarkers);
         } catch (PARSER_PACKAGE.preprocessor.ParseException pe) {
             throw new RuntimeException(pe);
         }         
      }
   }
}

#CompilationUnit# :
   (ExternAliasDirective)*
   (UsingDirective)*
   (GlobalAttributeSection)*
   (
      NamespaceDeclaration
      |
      TypeDeclaration
    )* 
   <EOF>
   {return CURRENT_NODE;}
;

ExternAliasDirective :
   "extern" "alias" <IDENTIFIER> ";"
;

UsingDirective :
    UsingStaticDirective
    |
    UsingAliasDirective
    |
    UsingNamespaceDirective
;    

UsingStaticDirective : 
    "using" "static" =>|| Name ";"
; 

UsingAliasDirective :
   "using" <IDENTIFIER> "=" =>|| Name ";"
;

UsingNamespaceDirective :
    "using" Name ";" =>||
;

GlobalAttributeSection :
   "["  ACTIVATE_TOKENS ASSEMBLY, MODULE ("assembly" | "module") =>|| ":" AttributeList [","] "]"
;

AttributeSection :
   "["
   [
      (<EVENT> |<RETURN> |<IDENTIFIER> )
      ":" =>||
      {String idImage = getToken(-1).getImage();}
      ASSERT {
         this.isParserTolerant()
         || idImage == null
         || idImage.equals("event")
         || idImage.equals("field")
         || idImage.equals("method")
         || idImage.equals("param")
         || idImage.equals("property")
         || idImage.equals("return")
         || idImage.equals("type")
      }
   ]
   AttributeList
   [","]
   "]"
;

AttributeList :
     Attribute ("," =>|+1 Attribute)*
;

Attribute :
   Name
   [AttributeArguments]
;

AttributeArguments :
    "(" 
    [
       SCAN ~(")" | <IDENTIFIER>"=")
       => [=>Type ":" ] Expression
       (
          ","
          [=>Type ":"] // since when?
          Expression
       )*
    ]
    [
       SCAN <IDENTIFIER> "="
       => NamedArgument
       (
          "," NamedArgument
       )*
    ]
    ")"  
;

NamedArgument :
    <IDENTIFIER> "=" Expression
;

/** Name of a Type or a Namespace */
Name :
   (
     QualifiedAliasMember
     |
     <IDENTIFIER>[TypeArgumentList]
   )
   (
      SCAN 2
      "." <IDENTIFIER> [TypeArgumentList]
   )*
;

QualifiedAliasMember :
   <IDENTIFIER> "::" =>|| <IDENTIFIER>
   [TypeArgumentList]
;

TypeArgumentList :
   "<"
   [
      Type
      ("," Type)* 
   ]
   DEACTIVATE_TOKENS RIGHT_SHIFT, RIGHT_SHIFT_ASSIGN 
   (">")
;

NamespaceDeclaration :
   "namespace"  QualifiedIdentifier NamespaceBody [";"]
;

QualifiedIdentifier :
    <IDENTIFIER> ("." <IDENTIFIER>)*
;

NamespaceBody :
   "{"
       (ExternAliasDirective)* 
       (UsingDirective)* 
       (
          NamespaceDeclaration 
          |
          TypeDeclaration
       )*
   "}"
;

TypeDeclaration :
  SCAN 0 {!checkNextTokenType(RBRACE) && !checkNextTokenType(EOF)}# =>
  (
   ClassDeclaration
   |
   StructDeclaration
   |
   InterfaceDeclaration
   |
   EnumDeclaration
   |
   DelegateDeclaration
  )
;
INJECT PARSER_CLASS :
{
   EnumSet<TokenType> permissibleModifiers;
}

Modifiers#void : //TODO
  (
    SCAN { permissibleModifiers == null 
         || 
         permissibleModifiers.contains(getToken(1).getType()) }#
      =>
      ("new"|"public"|"protected"|"internal"|"private"|"abstract"
      |"sealed"|"static"|"unsafe"|"override"|"virtual"|"extern"
      // Note that "ref" is only a permissible keyword for struct
      // since 7.3
      | "ref"
      // 
      | "readonly" // Have to check where this is possible and since when      
      )
      {
         if (permissibleModifiers != null) {
            permissibleModifiers.remove(getToken(0).getType());
         }
      }
     |
     SCAN { ((permissibleModifiers == null || permissibleModifiers.contains(ASYNC))
            && checkNextTokenImage("async"))
          }#
      => ACTIVATE_TOKENS ASYNC ("async")
      { if (permissibleModifiers!=null) permissibleModifiers.remove(ASYNC);}
  )*
;

ClassDeclaration :
  (AttributeSection)*
  Modifiers
  [SCAN {checkNextTokenImage("partial")}# => ACTIVATE_TOKENS PARTIAL ("partial")]
  "class"
  =>||
   <IDENTIFIER>
  [TypeParameterList]
  [":" (Name | "object" | "dynamic" | "string") ("," Name)*]
  (TypeParameterConstraintsClause)*
  "{"
   (ClassMemberDeclaration)*
  "}"
  [";"]
;

StructDeclaration :
   (AttributeSection)*
   Modifiers
  [SCAN {checkNextTokenImage("partial")}# => ACTIVATE_TOKENS PARTIAL ("partial")]
   "struct" 
   =>||
   <IDENTIFIER>
   [TypeParameterList]
   [":" Name ("," Name)*]
   (TypeParameterConstraintsClause)*
   "{" (ClassMemberDeclaration)* "}"
   [";"] 
;

InterfaceDeclaration :
   (AttributeSection)*
   Modifiers
   [SCAN {checkNextTokenImage("partial")}# => ACTIVATE_TOKENS PARTIAL ("partial")]
   "interface"
   =>||
   <IDENTIFIER>
   [TypeParameterList]
   [":" Name ("," Name)*]
   (TypeParameterConstraintsClause)*
   "{" 
   (InterfaceMemberDeclaration)* 
   "}"
   [";"]
;

InterfaceMemberDeclaration :
   InterfacePropertyDeclaration
   |
   InterfaceMethodDeclaration
   |
   InterfaceEventDeclaration
   |
   InterfaceIndexerDeclaration
; 

InterfaceEventDeclaration :
   (AttributeSection)*
   ["new"]
   "event" =>||
   Type
   <IDENTIFIER>
   ";"
;

InterfaceIndexerDeclaration :
   (AttributeSection)*
   ["new"]
   Type
   "this"
   "[" FormalParameters "]"
   "{" InterfaceAccessors "}"
;

EnumDeclaration : 
   (AttributeSection)*
   Modifiers
   "enum" 
   =>||
   <IDENTIFIER>
   [":" ("sbyte"|"byte"|"short"|"ushort"|"int"|"uint"|"long"|"ulong"|"char")]
   EnumBody
   [";"]
;

EnumBody#void :
   "{"
   [
      EnumMemberDeclaration
      ("," =>|+1 EnumMemberDeclaration)*
      [","]
   ]
   "}"
;

EnumMemberDeclaration :
   (AttributeSection)*
   <IDENTIFIER>
   ["=" Expression]
;

DelegateDeclaration :
   (AttributeSection)*
   Modifiers
  "delegate" 
  =>||
  ReturnType
  <IDENTIFIER>
  [TypeParameterList]
  "(" [FormalParameters] ")"
  (TypeParameterConstraintsClause)*
  ";"
;

TypeParameterConstraintsClause :
  SCAN {checkNextTokenImage("where")} =>
  ACTIVATE_TOKENS WHERE ("where") 
  <IDENTIFIER> 
  ":" 
  (Name | "class" | "struct") 
  ("," =>|+1 Name)* 
  ["," "new" =>|| "(" ")"]
;

ClassMemberDeclaration :
   ConstantDeclaration
   |
   MethodDeclaration 
   | 
   FieldDeclaration 
   | 
   PropertyDeclaration 
   | 
   EventDeclaration 
   | 
   IndexerDeclaration 
   |
   OperatorDeclaration 
   | 
   ConstructorDeclaration 
   |
   SCAN ~\StructDeclaration
   => DestructorDeclaration
   |
   SCAN \StructDeclaration 
   => StructMemberDeclarationUnsafe
   |
   StaticConstructorDeclaration 
   | 
   TypeDeclaration
;

StructMemberDeclarationUnsafe :
   (AttributeSection)*
   Modifiers
   "fixed"
   Type
   (<IDENTIFIER> "[" Expression "]")+
;

ConstantDeclaration :
   (AttributeSection)*
   ("new" | "public" | "protected" | "internal" | "private")*
   "const" 
   =>||
   Type 
   ConstantDeclarator ("," ConstantDeclarator)*
   ";"
;

ConstantDeclarator : <IDENTIFIER> "=" Expression ;

FieldDeclaration :
    (AttributeSection)*
    ("new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" | "unsafe")*
    Type
    =>|+2
    VariableDeclarator ("," VariableDeclarator)*
   ";"
;

PropertyDeclaration :
   (AttributeSection)*
   (
      "new"|"public"|"protected"|"internal"
      |"private"|"static"|"virtual"|"sealed"
      |"override"|"abstract"|"extern" | "unsafe"
      | "readonly" // REVISIT. When is this permissible?
   )*
   Type
   Name
   =>|+1
   PropertyBody
;

InterfacePropertyDeclaration :
   (AttributeSection)*
   ["new"]
   Type
   <IDENTIFIER>
   "{" 
   =>||
   InterfaceAccessors 
   "}"
;

InterfaceAccessors :
    (AttributeSection)* ACTIVATE_TOKENS GET ("get" ";") =>|| [(AttributeSection)* ACTIVATE_TOKENS SET ("set" ";")]
    |
    (AttributeSection)* ACTIVATE_TOKENS SET ("set" ";") =>|| [(AttributeSection)* ACTIVATE_TOKENS GET ("get" ";")]
    | 
    FAIL "Expecting getter or setter"
;

EventDeclaration :
   (AttributeSection)*
   Modifiers
   "event"
   =>||
   Type
   (
      VariableDeclarator =>|+1 ("," VariableDeclarator)* ";"
      |
      Name 
      "{" 
      (
          AddAccessorDeclaration RemoveAccessorDeclaration
          |
          RemoveAccessorDeclaration AddAccessorDeclaration
      )
      "}"
   )   
;

IndexerDeclaration :
    (AttributeSection)*
    Modifiers
    Type
    [Name "."] 
    "this"
    "["
    =>||
     FormalParameters 
    "]"
    (
       "{" AccessorDeclarations "}"
       |
       "=>" Expression ";"
    )    
;

OperatorDeclaration :
   (AttributeSection)*
   ( "public" | "static" | "extern" | "unsafe")+
   (Type | "implicit" | "explicit")
   "operator" =>||
   (
      ("+"|"-") =>|| "(" Type <IDENTIFIER> ["," Type <IDENTIFIER>] ")"
      |
      ("!"|"~"|"++"|"--"|"true"|"false") =>|| "(" Type <IDENTIFIER> ")"
      |
      ("*"|"/"|"%"|"&"|"|"|"^"|"<<"|"right_shift"|"=="|"!="|">"|"<"|">="|"<=")
      "(" Type <IDENTIFIER> "," Type <IDENTIFIER> ")"
      |
      Type "(" Type <IDENTIFIER> ")" 
   )
   MethodBody
;

DestructorDeclaration :
   (AttributeSection)*
   ["extern"]
   "~"
   <IDENTIFIER> 
   "(" 
   =>||
   ")"
   MethodBody
;

ConstructorDeclaration : 
   (AttributeSection)*
   Modifiers
   <IDENTIFIER>
   "(" =>||
   [FormalParameters]
   ")"
   [
      ":"
      ("base" | "this")
      "(" [ArgumentList] ")"
   ]
   MethodBody
;

StaticConstructorDeclaration :
   (AttributeSection)*
   (
      "extern" ["static"]
      |
      "static" ["extern"]
   )
   <IDENTIFIER>
   "(" =>||
   ")"
   MethodBody
;

ArgumentList : Argument ("," Argument)* ;

Argument :
   [=> <IDENTIFIER> ":"]
   (
      => "out" Type <IDENTIFIER> // since C# 7.0
      |
      ["ref" | "out"] Expression
   )
;

AddAccessorDeclaration :
    (AttributeSection)*
    ACTIVATE_TOKENS ADD ("add")
    =>||
    Block
;

RemoveAccessorDeclaration :
    (AttributeSection)*
    ACTIVATE_TOKENS REMOVE ("remove")
    =>||
    Block
;

AccessorDeclarations :
   GetAccessorDeclaration [SetAccessorDeclaration]
   |
   SetAccessorDeclaration [GetAccessorDeclaration]
;   

PropertyBody :
  "{" AccessorDeclarations "}"
   ["=" VariableInitializer] 
  |
  "=>" 
  Expression 
  ";"
;

GetAccessorDeclaration :
   (AttributeSection)*
   [
      "protected" ["internal"]
      | "internal" ["protected"]
      | "private" 
      | "readonly" // Only in a struct, I think. And since which version?
   ]
   ACTIVATE_TOKENS GET ("get") =>||
   (
      Block 
      |
      "=>" Expression ";"
      | 
      ";"
   )
;

SetAccessorDeclaration :
   (AttributeSection)*
   [
      "protected" ["internal"]
      | "internal" ["protected"]
      | "private" 
   ]
   ACTIVATE_TOKENS SET ("set") =>||
   (
      Block 
      |
      "=>" Expression ";"
      |
      ";"
   )
;   

VariableInitializer :
   Expression
   | 
   ArrayInitializer
;

ArrayInitializer :
   "{"
      [VariableInitializer (SCAN 2 "," VariableInitializer)* [","]]
   "}"
;

MethodDeclaration :
   (AttributeSection)*
   Modifiers
   [SCAN {checkNextTokenImage("partial")}# => ACTIVATE_TOKENS PARTIAL ("partial")]
   ReturnType
   //MemberName
   Name
   [TypeParameterList]
   "(" 
   =>||
    [FormalParameters] 
   ")"
   (TypeParameterConstraintsClause)*
   MethodBody
;

MethodBody :
   Block 
   | 
   ["=>" Expression] ";"
;

InterfaceMethodDeclaration :
   (AttributeSection)*
   ["new"]
   ReturnType
   <IDENTIFIER>
   [TypeParameterList]
   "(" =>||
   [FormalParameters] 
   ")"
   (TypeParameterConstraintsClause)*
   ";"
;

ReturnType : "void" | Type ;

FormalParameters :
   ParameterArray
   |
   FixedParameter 
   (
      SCAN {checkNextTokenType(COMMA)} ~("," ParameterArray)  
      => "," FixedParameter
   )* 
   ["," ParameterArray]
;   

FixedParameter :
   (AttributeSection)*
   ("ref"| "out" | "this")*
   Type
   <IDENTIFIER>
   ["=" Expression]
;

ParameterArray : 
   (AttributeSection)*
   "params" =>|| 
   ArrayType
   <IDENTIFIER>
;

VariableDeclarator : <IDENTIFIER> ["=" (Expression|ArrayInitializer)] ;   

TypeParameterList :
   "<"
   (AttributeSection)*
   ["in"|"out"] // Only with interfaces 
   Name
   ("," (AttributeSection)* Name)*    
   ">"
;

NonArrayType#void : Type ;

ArrayType#void : Type ;

NonNullableType : Type;

Type :
    => "void" "*"
    |
    (
      PrimitiveType 
      |
      Name
   )
   [
      SCAN ~\NonNullableType
      => "?"
   ]
   ( 
      SCAN ~\NonArrayType =>
      "[" (",")* "]" 
   )*
   [
      SCAN 0 \ArrayType => 
      ASSERT {getToken(0).getType() == TokenType.RBRACKET}#
   ]
   ("*")*
;

PrimitiveType#void :
   "bool" | "byte" | "char" | "decimal" | "double" | "float"
   | "int" | "long" | "object" | "sbyte" | "short" | "string"
   |"ushort"|"uint" |"ulong"
;

Block :
  "{"
   ( Statement )* 
  "}"
;

Expression :
   SCAN QueryExpressionLA
   =>QueryExpression
   |
   LambdaExpression
   |
   AssignmentExpression
   |
   ConditionalExpression
;

LambdaExpression : LambdaLHS =>|| (Block | Expression) ;

LambdaLHS :
  [
     SCAN {checkNextTokenImage("async")}#
     => ACTIVATE_TOKENS ASYNC ("async")
  ]
  (
   =>ImplicitAnonymousFunctionSignature
   |
   ExplicitLambdaSignature
  )
  "=>"
;

ImplicitAnonymousFunctionSignature :
   <IDENTIFIER>
   |
   "(" [<IDENTIFIER> ("," <IDENTIFIER>)*] ")"
;

QueryExpressionLA#scan :
   <IDENTIFIER> ASSERT {getToken(0).getImage().equals("from")}
   (
      <IDENTIFIER> "in" 
      |
      Type <IDENTIFIER> "in" 
   )
;

QueryExpression :
   ACTIVATE_TOKENS ASCENDING,BY,DESCENDING,EQUALS,FROM,GROUP,JOIN,LET,
                   INTO, ORDERBY,SELECT,WHERE
   (
     FromClause 
     QueryBody
   ) 
;

InQueryExpression#void :
   DEACTIVATE_TOKENS ASCENDING,BY,DESCENDING,EQUALS,FROM,
                   GROUP,JOIN,LET,INTO,
                   ORDERBY,SELECT,WHERE
   (Expression)
;

FromClause :
   "from"
   (
      <IDENTIFIER> "in" =>|| InQueryExpression
      |
      Type <IDENTIFIER> "in" InQueryExpression 
   )
;

QueryBody :
   (QueryBodyClause)*
   (
      SelectClause
      |
      GroupClause
   )
   [
      "into" 
      <IDENTIFIER>
      QueryBody
   ]
;

QueryBodyClause :
   FromClause
   |
   LetClause
   |
   WhereClause
   |
   JoinClause
   |
   OrderbyClause
;

LetClause : "let" <IDENTIFIER> "=" InQueryExpression ;

WhereClause : "where" InQueryExpression ;

JoinClause : 
   "join" 
   (
      <IDENTIFIER> "in" 
      |
      Type <IDENTIFIER> "in"
   )
   InQueryExpression
   "on"
   InQueryExpression
   "equals"
   InQueryExpression
   ["into" <IDENTIFIER>]
;   

SelectClause : "select" InQueryExpression ;

GroupClause : "group" InQueryExpression "by" InQueryExpression;

OrderbyClause : 
    "orderby" 
    InQueryExpression 
    ["ascending"|"descending"] 
    (
       "," InQueryExpression ["ascending"|"descending"]
    )*
;    

AssignmentExpression :
   UnaryExpression AssignmentOperator =>|| Expression
;

MultiplicativeExpression : 
   UnaryExpression 
   (
      ("*" | "/" | "%") 
      UnaryExpression
   )*
;

AdditiveExpression :
   MultiplicativeExpression
   (
      ("+" | "-")
      MultiplicativeExpression
   )*
;

ShiftExpression :
   AdditiveExpression
   (
      ("<<" | ">>")
      AdditiveExpression
   )*
;

RelationalExpression :
   ShiftExpression
   (
      ("<"|">"|"<="|">=") ShiftExpression
      |
      "is" NonNullableType [<IDENTIFIER>]
      |
      "as" Type
   )*
;

EqualityExpression :
   RelationalExpression
   (
      ("=="|"!=") 
      RelationalExpression
   )*
;

AndExpression :
   EqualityExpression
   (
      "&"
      EqualityExpression
   )*
;

ExclusiveOrExpression :
   AndExpression
   (
      "^"
      ExclusiveOrExpression
   )*
;

InclusiveOrExpression :
   ExclusiveOrExpression 
   (
      "|"
      ExclusiveOrExpression
   )*
;

ConditionalAndExpression :
   InclusiveOrExpression
   (
      "&&"
      InclusiveOrExpression
   )*
;

ConditionalOrExpression :
    ConditionalAndExpression
    (
       "||"
       ConditionalAndExpression
    )*
;

NullCoalescingExpression :
    ConditionalOrExpression
    (
       "??"
       ConditionalOrExpression
    )*
;

ConditionalExpression : NullCoalescingExpression ["?" Expression ":" Expression] ;

AssignmentOperator #void :
  "=" 
  | "+=" 
  | "-=" 
  | "*=" 
  | "/=" 
  | "%=" 
  | "&="
  | "|="
  | "^="
  | "<<="
  | ">>="
  | "??=" // since 8.0
;

UnaryExpression :
   UnaryExpressionPlusOrMinus
   |
   UnaryExpressionNotPlusMinus
   |
   CastExpression
   |
   AwaitExpression
   |
   ThrowExpression // since 7.0
   |
   PreIncrementExpression
   |
   PreDecrementExpression
   |
   UnaryExpressionUnsafe
   |
   NullConditionalExpression 
;

ThrowExpression : "throw" Expression ;

CastExpression : "(" Type ")" =>|+1 UnaryExpression ;

AwaitExpression : 
   SCAN {checkNextTokenImage("await")}#
    => 
   ACTIVATE_TOKENS AWAIT ("await") UnaryExpression
;

UnaryExpressionUnsafe : ("*" | "&") UnaryExpression ;

PreIncrementExpression : "++" UnaryExpression ;

PreDecrementExpression : "--" UnaryExpression ;

UnaryExpressionPlusOrMinus : ("+" | "-") UnaryExpression ;

UnaryExpressionNotPlusMinus : ("!" | "~") UnaryExpression ;

NullConditionalOperations : 
   "?" =>|+1
   (
      "." <IDENTIFIER> [TypeArgumentList]
      |
      "[" ArgumentList "]"
   )
   (
      ["?"] "." =>|| <IDENTIFIER> [TypeArgumentList]
      |
      ["?"] "[" =>|| ArgumentList "]"
      |
      "(" [ArgumentList] ")"
   )*
;

NullConditionalExpression : PrimaryExpression [NullConditionalOperations] ;

PrimaryExpression :
   (
   => ArrayCreationExpression
   |
   PrimaryNoArrayCreationExpression
   )
   (
    "(" [ArgumentList] ")"
    |
    "[" Expression ("," Expression)*  "]"
    |
    "." <IDENTIFIER> [=>TypeArgumentList]
    |
    "->" <IDENTIFIER>
    |
    "++"
    |
    "--"
   )*   
;   

ArrayCreationExpression :
    "new"
    (
       RankSpecifier ArrayInitializer
       |
       NonArrayType "[" =>|+1 Expression ("," Expression)* "]" (RankSpecifier)* [ArrayInitializer]
       |
       ArrayType ArrayInitializer
    )
;

RankSpecifier : "[" (",")* "]" ;

PrimaryNoArrayCreationExpression :
   (
      LiteralExpression
      |
      <INTERPOLATED_STRING_LITERAL> // TODO: deal with this better.
      |
      "this"
      |
      BaseAccess
      |
      PrimitiveTypeAccess
      |
      QualifiedAliasMemberAccess
      |
      SimpleName
      |
      ParenthesizedExpression
      |
      TypeofExpression
      |
      DefaultValueExpression
      |
      NameofExpression
      |
      CheckedExpression
      |
      SizeofExpression 
      |
      UncheckedExpression
      |
      ObjectCreationExpression
      |
      AnonymousObjectCreationExpression
      |
      AnonymousMethodExpression
   )
;

PrimitiveTypeAccess :
   ("dynamic" | PrimitiveType)
   "." =>||
   <IDENTIFIER>
   [TypeArgumentList]
;   

QualifiedAliasMemberAccess :
   <IDENTIFIER> "::" =>|| 
   <IDENTIFIER> [TypeArgumentList]
;
   


BaseAccess :
   "base"
   (
     "." <IDENTIFIER> [TypeArgumentList]
     |
    "[" Expression ("," Expression)* "]"
   )
;

NameofExpression : "nameof" "(" NamedEntity ")" ;

NamedEntity :
   (SimpleName | "this"| "base" | PredefinedType | QualifiedAliasMember)
   ("." <IDENTIFIER> [TypeArgumentList])+
;   

PredefinedType#void :
    "bool" | "byte" | "char"| "decimal" | "double" | "float" | "int" 
    | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort"
;

// The "(Type)" part is optional (since C# 7.1)
// if it can be inferred by the compiler.
DefaultValueExpression : "default" [ "(" Type ")" ] ;

SimpleName : <IDENTIFIER> [=>TypeArgumentList] ;

ParenthesizedExpression : "(" Expression ")" ;

TypeofExpression :
    "typeof" "("
    (
       "void"
       |
   // The following expansion is a little bit tricky.
   // If our initial scanahead doesn't find any
   // any empty type args, like <,,,> sort of things,
   // then the assertion at the end fails, and this means
   // that we go to the next choice, which is
   // a regular Type production (with no funky <,,> thingies
       =>UnboundTypeName ASSERT {sawEmptyTypeArgs}#
       |
       Type
    )
    ")"
;

INJECT PARSER_CLASS : {boolean sawEmptyTypeArgs = false;}

UnboundTypeName :
   {sawEmptyTypeArgs = false;}#
   [=> <IDENTIFIER> "::"]
   <IDENTIFIER>
   ["<" (",")* ">" {sawEmptyTypeArgs = true;}#]
   (
      "."
      <IDENTIFIER>
      ["<" (",")* ">" {sawEmptyTypeArgs = true;}#]
   )*
;

ObjectCreationExpression :
   "new" =>|+1 [Type] // The Type is optional since C# 9
   (
      "(" [ArgumentList] ")" [ObjectInitializer | CollectionInitializer]
      |
      (ObjectInitializer | CollectionInitializer)
   )
;

AnonymousObjectCreationExpression :
   "new" 
   "{" =>||
    [MemberDeclarator ("," MemberDeclarator)* [","]]
   "}"
;

MemberDeclarator :
    <IDENTIFIER> "=" =>|| Expression
    |
    PrimaryExpression // TODO ensure that it is of the right type
;


AnonymousMethodExpression :
   "delegate"
   [
      "("
      [ExplicitAnonymousFunctionSignature]
      ")"
   ]
   Block
;

ExplicitAnonymousFunctionSignature : 
   ExplicitAnonymousFunctionParameter 
   ("," ExplicitAnonymousFunctionParameter)*
; 

ExplicitLambdaSignature :
   "(" 
       ExplicitAnonymousFunctionSignature
   ")"
;

ExplicitAnonymousFunctionParameter :  ["ref"|"out"] Type <IDENTIFIER> ;

ObjectInitializer :
  SCAN "{" (<IDENTIFIER> | "[" ArgumentList "]") "="
  =>
  "{" 
  MemberInitializer (SCAN 2 "," MemberInitializer)* [","]
  "}"
;

MemberInitializer :
   (<IDENTIFIER> | "[" ArgumentList "]")
   "="
   (Expression | ObjectInitializer | CollectionInitializer)
;

CollectionInitializer : 
   "{" 
       [
          ElementInitializer ("," =>|+1 ElementInitializer)* [","]
       ]
   "}"
;

ElementInitializer :
    "{" Expression ("," Expression)* "}"
    |
    Expression // non-assignment, deal with later
;

CheckedExpression : "checked" "(" Expression ")" ;

UncheckedExpression : "unchecked" "(" Expression ")" ;

SizeofExpression : "sizeof" "(" Type ")" ;

LiteralExpression :
   "true"
   |
   "false"
   |
   "null"
   |
   <INTEGER_LITERAL>
   |
   <REAL_LITERAL>
   |
   <CHARACTER_LITERAL>
   |
   <STRING_LITERAL>
;   

Label : SCAN 2 <IDENTIFIER> ":" ;

Statement :
   (Label)*
    (
       // REVISIT this
       SCAN {!checkNextTokenImage("await")}#
       =>
       MethodDeclaration
       |
       LocalConstantDeclaration ";" 
       |
       LocalVariableDeclaration ";"
       |
       EmbeddedStatement
    )
;

EmptyStatement : ";" ;

EmbeddedStatement :
    Block 
    |
    EmptyStatement
    |
    IfStatement
    |
    WhileStatement
    |
    DoStatement
    |
    YieldStatement
    |
    CheckedStatement
    |
    UncheckedStatement
    |
    TryStatement
    |
    BreakStatement
    |
    ContinueStatement
    |
    GotoStatement
    |
    ReturnStatement
    |
    ThrowStatement
    |
    UnsafeStatement
    |
    UsingStatement
    |
    LockStatement
    |
    FixedStatement
    |
    SwitchStatement
    |
    ForStatement
    |
    ForeachStatement
    |
    ExpressionStatement
;    

DeclarationStatement : 
   LocalVariableDeclaration ";"
   |
   LocalConstantDeclaration ";"
;

LocalVariableDeclaration :
   (
      ACTIVATE_TOKENS VAR ("var") 
      | 
      Type 
      ASSERT {getToken(-1).getType() == DOT || !getToken(0).toString().equals("await")}#
   )
   ASSERT {getToken(2).getType() != LPAREN}#
   =>|+1
   LocalVariableDeclarator
   ("," LocalVariableDeclarator)*
;

LocalVariableDeclarator : <IDENTIFIER> ["=" LocalVariableInitializer] ;

LocalVariableInitializer :  
   Expression 
   | 
   ArrayInitializer 
   | 
   "stackalloc" Type "[" Expression "]"
;

LocalConstantDeclaration :
   "const"
   Type
   ConstantDeclarator
   ("," ConstantDeclarator)*
;

CheckedStatement : "checked" Block ;

UncheckedStatement : "unchecked" Block ;

BreakStatement : "break" ";" ;

ContinueStatement : "continue" ";" ;

GotoStatement : 
   "goto"
   (
      <IDENTIFIER>
      |
      "default"
      |
      "case" Expression
   )
   ";"
;   

IfStatement : "if" "(" Expression ")" EmbeddedStatement [ "else" EmbeddedStatement] ;

DoStatement : "do" EmbeddedStatement "while" "(" Expression ")" ";" ;

WhileStatement : "while" "(" Expression ")" EmbeddedStatement ;

ForeachStatement : "foreach" "(" ("var" | Type) <IDENTIFIER> "in" Expression ")" EmbeddedStatement ;

TryStatement : 
   "try" Block
   (
      FinallyClause
      |
      (CatchClause)+ [FinallyClause]
   )
;

ReturnStatement : "return" [Expression] ";" ;

ThrowStatement : "throw" [Expression] ";" ;

FinallyClause : "finally" Block ;

UnsafeStatement : "unsafe" Block ; 

CatchClause : 
   "catch" 
   [ "(" Type [<IDENTIFIER>] ")" ] 
   [ "when" "(" Expression ")" ] 
   Block
;

YieldStatement :
   SCAN {checkNextTokenImage("yield")}#
   => ACTIVATE_TOKENS YIELD ("yield")
   (
      "break"
      |
      "return" Expression
   )
   ";"
;   

UsingStatement :
   "using"
   "("
   (LocalVariableDeclaration | Expression)
   ")"
   EmbeddedStatement
;

LockStatement : "lock" "(" Expression ")" EmbeddedStatement ;

FixedStatement :
   "fixed"
   "("
   FixedPointerDeclarator ("," FixedPointerDeclarator)*
   ")"
   EmbeddedStatement
; 

PointerType : 
   ("void" | Type) 
   [
     SCAN 0 {getToken(0).getType() != STAR}#
     => "*" 
   ]
;

FixedPointerDeclarator : 
   PointerType
   <IDENTIFIER> 
   "=" 
   ["&"]
   Expression
;

StatementExpression :
   Expression // TODO, only certain expressions can be here!
;

ExpressionStatement : StatementExpression ";" ;

SwitchStatement : "switch" "(" Expression ")" SwitchBlock ; 

SwitchBlock : "{" (SwitchSection)* "}" ; 

SwitchLabel : 
   "case" Type <IDENTIFIER> =>|| [WhenClause] ":"
   |
   "case" Expression [WhenClause] ":" 
   |
   "default" ":"
;   

WhenClause :
   SCAN 0 {getToken(1).getImage().equals("when")}#
   => 
   ACTIVATE_TOKENS WHEN ("when")
   Expression
;

SwitchSection : 
   (SwitchLabel)+ 
   (
      SCAN 0 {
         // A bit ugly. Really need to make syntactic lookahead a bit more powerful 
         // in terms of negative conditions! 
                getToken(1).getType() != RBRACE
                && getToken(1).getType() != CASE 
                && !(getToken(1).getType() == DEFAULT && getToken(2).getType() == COLON)
             } 
      => Statement
   )+ 
;  

ForStatement : 
   "for" 
   "("
   [LocalVariableDeclaration | StatementExpression ("," StatementExpression)*]
   ";"
   [Expression]
   ";"
   [
      StatementExpression
      ("," StatementExpression)*
   ]
   ")"
   EmbeddedStatement
;
