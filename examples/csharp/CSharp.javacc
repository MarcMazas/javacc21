CSHARP_UNICODE_ESCAPE;
PARSER_PACKAGE="org.parsers.csharp";
NODE_PACKAGE="org.parsers.csharp.tree";
DEFAULT_LEXICAL_STATE=CSHARP;
ENSURE_FINAL_EOL=true;

INCLUDE "CSharpLexer.javacc"

#CompilationUnit# :
   (ExternAliasDirective)*
   (UsingDirective)*
   (GlobalAttributeSection)*
   (
      NamespaceDeclaration
      |
      TypeDeclaration
    )* 
   <EOF>
   {return CURRENT_NODE;}
;

ExternAliasDirective :
   "extern" "alias" <IDENTIFIER> ";"
;

UsingDirective :
    UsingStaticDirective
    |
    UsingAliasDirective
    |
    UsingNamespaceDirective
;    

UsingStaticDirective : 
    "using" "static" =>|| Name ";"
; 

UsingAliasDirective :
   "using" <IDENTIFIER> "=" =>|| Name ";"
;

UsingNamespaceDirective :
    "using" Name ";" =>||
;

GlobalAttributeSection :
   "["  ("assembly" | "module") ":" AttributeList [","] "]"
;

AttributeSection :
   "["
   ("field"|"event"|"method"|"param"|"property"|"return"|"type")
   ":"
   AttributeList
   [","]
   "]"
;

AttributeList :
     Attribute ("," Attribute)*
;

Attribute :
   Name
   [AttributeArguments]
;

AttributeArguments :
    "(" 
    [
       SCAN ~(<IDENTIFIER>"=")
       => Expression
       (
          ","
          Expression
       )*
    ]
    [
       SCAN <IDENTIFIER>"="
       => NamedArgument
       (
          "," NamedArgument
       )*
    ]
    ")"  
;

NamedArgument :
    <IDENTIFIER> "=" Expression
;


/** Name of a Type or a Namespace */
Name :
   SCAN <IDENTIFIER> "::"
   => QualifiedAliasMember()
   |
   <IDENTIFIER>[TypeArgumentList()]
   ("." <IDENTIFIER> [TypeArgumentList()])*
;

QualifiedAliasMember :
   <IDENTIFIER> "::" <IDENTIFIER>
   [TypeArgumentList]
;

TypeArgumentList :
   "<"
   [
      Type
      ("," Type)* 
   ]
   ">"
;

Expression :  Name; // TODO!

NamespaceDeclaration :
   "namespace"  QualifiedIdentifier NamespaceBody [";"]
;

QualifiedIdentifier :
    <IDENTIFIER> ("." <IDENTIFIER>)*
;

NamespaceBody :
   "{"
       (ExternAliasDirective)* 
       (UsingDirective)* 
       (
          NamespaceDeclaration 
          |
          TypeDeclaration
       )*
   "}"
;

TypeDeclaration :
   ClassDeclaration
   |
   StructDeclaration
   |
   InterfaceDeclaration
   |
   EnumDeclaration
   |
   DelegateDeclaration
;

Modifiers#void :
  ("new"|"public"|"protected"|"internal"|"private"|"abstract"|"sealed"|"static"|"unsafe")*
;

ClassDeclaration :
  (AttributeSection)*
  Modifiers
  ["partial"]
  "class"
  =>||
   <IDENTIFIER>
  [TypeParameterList]
  [":" (Name | "object" | "dynamic" | "string") ("," Name)*]
  (TypeParameterConstraintsClause)*
  "{"
   (ClassMemberDeclaration)*
  "}"
  [";"]
;

StructDeclaration :
   (AttributeSection)*
   Modifiers
   ["partial"]
   "struct" 
   =>||
   <IDENTIFIER>
   [":" Name ("," Name)*]
   (TypeParameterConstraintsClause)*
   StructBody
   [";"] 
;

InterfaceDeclaration :
   (AttributeSection)*
   Modifiers
   ["partial"]
   "struct" 
   "interface"
   =>||
   <IDENTIFIER>
   [TypeParameterList]
   [Name ("," Name)*]
   (TypeParameterConstraintsClause)*
   InterfaceBody
   [";"]
;

EnumDeclaration : 
   (AttributeSection)*
   Modifiers
   "enum" 
   =>||
   <IDENTIFIER>
   [":" ("sbyte"|"byte"|"short"|"ushort"|"int"|"uint"|"long"|"ulong"|"char")]
   EnumBody
   [";"]
;

DelegateDeclaration :
   (AttributeSection)*
   Modifiers
  "delegate" 
  =>||
  Type
  <IDENTIFIER>
  [TypeParameterList]
  FormalParameters
  (TypeParameterConstraintsClause)*
;

TypeParameterConstraintsClause :
  "where" <IDENTIFIER> ":" (Name | "class" | "struct") ["," Name]
;

ClassMemberDeclaration :
   ConstantDeclaration
   |
   FieldDeclaration 
   | 
   MethodDeclaration 
   | 
   PropertyDeclaration 
/*   | 
   EventDeclaration 
   | 
   IndexerDeclaration
   |
   OperatorDeclaration 
   | 
   ConstructorDeclaration 
   | 
   DestructorDeclaration
   |
   StaticConstructorDeclaration 
   | 
   TypeDeclaration
*/   
;

ConstantDeclaration :
   (AttributeSection)*
   ("new" | "public" | "protected" | "internal" | "private")*
   "const" 
   =>||
   Type 
   Declarator ("," Declarator)*
;

FieldDeclaration :
    (AttributeSection)*
    ("new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" | "unsafe")*
    Type
    =>||
    Declarator ("," Declarator)*
;

PropertyDeclaration :
   (AttributeSection)*
   (
      "new"|"public"|"protected"|"internal"
      |"private"|"static"|"virtual"|"sealed"
      |"override"|"abstract"|"extern" | "unsafe"
   )*
   Type
   <IDENTIFIER>
   PropertyBody
;

PropertyBody :
  "{"
   (
      GetAccessorDeclaration [SetAccessorDeclaration]
      |
      SetAccessorDeclaration [GetAccessorDeclaration]
   )
   ["=" VariableInitializer] 
  "}"
  |
  "=" VariableInitializer
;

GetAccessorDeclaration :
   (AttributeSection)*
   [
      "protected" ["internal"]
      | "internal" ["protected"]
      | "private" 
   ]
   "get" =>||
   Block ";"
;

SetAccessorDeclaration :
   (AttributeSection)*
   [
      "protected" ["internal"]
      | "internal" ["protected"]
      | "private" 
   ]
   "set" =>||
   Block
   ";"
;   

VariableInitializer :
   Expression
   | 
   ArrayInitializer
;

ArrayInitializer :
   "{"
      VariableInitializer [("," VariableInitializer)+ [","]]
   "}"
;

MethodDeclaration :
   (AttributeSection)*
   ("new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" | "unsafe")*
   ["partial"]
   Name
   [TypeParameterList]
   FormalParameters
   (TypeParameterConstraintsClause)*
   (Type | "void")
   //MethodBody
;

FormalParameters :
  "("
    [
      FixedParameter 
      (SCAN ~("," ParameterArray) => "," FixedParameter)* 
      ["," ParameterArray]
      |
      ParameterArray
    ]
   ")"
;   

FixedParameter :
   (AttributeSection)*
   ("ref"| "out" | "this")*
   Type
   <IDENTIFIER>
   ["=" Expression]
;

ParameterArray : 
   (AttributeSection)*
   "params" =>|| 
   ArrayType
   <IDENTIFIER>
;

ArrayType :
   Type "[" (",")* "]"
;

Declarator :
   <IDENTIFIER> 
   "="
   Expression
;   

InterfaceBody :
   "{"
//  (InterfaceMemberDeclaration)* //TODO
   "}"
;

StructBody :
   "{"
//      (StructMemberDeclaration)* //TODO
   "}"
;

TypeParameterList :
   "<"
   (AttributeSection)*
   ["in"|"out"] // Only with interfaces 
   Name
   ("," (AttributeSection)* Name)*    
   ">"
;

EnumBody :
   "{"
// TODO   
//   [
//      EnumMemberDeclaration
//      ("," EnumMemberDeclaration)*
//   ]
   "}"
;

Type :
    => "void" "*"
    |
    "void" // REVISIT, lone void is only valid in a return type
    |
    (
       (
        "object"|"dynamic"|"string"|"decimal"|"sbyte"|"byte"|"short"|"ushort"|"int"|"uint"|"long"|"ulong"|"char"|"float"|"double"|"bool"
        |
        Name() ["?"]
      )
      [ "[" (",")* "]" ]
      ["*"]
   )
;

Block :
  "{"
    // (Statement)* TODO
  "}"
;

