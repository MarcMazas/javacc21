PARSER_PACKAGE="org.parsers.csharp";
NODE_PACKAGE="org.parsers.csharp.tree";
DEFAULT_LEXICAL_STATE=CSHARP;
TABS_TO_SPACES=4;
PRESERVE_LINE_ENDINGS;
ENSURE_FINAL_EOL;

DEACTIVATE_TOKENS=ADD,ASSEMBLY,ASYNC,AWAIT,GET,INTO,MODULE,PARTIAL,
                  REMOVE,SET,VAR,WHEN,YIELD, __ARGLIST,
                  // The following are all used in queries                  
                  ASCENDING,BY,DESCENDING,EQUALS,FROM,GROUP,JOIN,LET,
                  INTO, ON, ORDERBY,SELECT,WHERE;

INCLUDE "CSharpLexer.javacc"

INJECT PARSER_CLASS :
   import PARSER_PACKAGE.cspreprocessor.Preprocessor; 
{
   public PARSER_CLASS(Path path, boolean usePreprocessor) throws IOException {
      this(path);
      if (usePreprocessor) {
         try {
            Preprocessor ppp = new Preprocessor(path, null);
            java.util.BitSet lineMarkers = ppp.PP_Root();
            token_source.setUnparsedLines(lineMarkers);
         } catch (PARSER_PACKAGE.cspreprocessor.ParseException pe) {
             throw new RuntimeException(pe);
         }         
      }
   }
}

INJECT LEXER_CLASS : 
{
   public void setUnparsedLines(BitSet parsedLines) {
      for (int i=0; i < lineOffsets.length; i++) {
         if (parsedLines.get(i+1)) {
               int lineOffset = lineOffsets[i];
               int nextLineOffset = i < lineOffsets.length -1 ? lineOffsets[i+1] : content.length();
               for (int offset = lineOffset; offset < nextLineOffset; offset++) {
                  tokenLocationTable[offset] = IGNORED;
               }
         }
      }
   }
}

#CompilationUnit# :
   (ExternAliasDirective)*
   (UsingDirective)*
   (GlobalAttributeSection)*
   (
      NamespaceDeclaration
      |
      TypeDeclaration
    )* 
   <EOF>
   {return CURRENT_NODE;}
;

ExternAliasDirective :
   "extern" 
   <IDENTIFIER>
   ASSERT {getToken(0).getImage().equals("alias")}#
   =>||
   <IDENTIFIER> ";"
;

UsingDirective :
    UsingStaticDirective
    |
    UsingAliasDirective
    |
    UsingNamespaceDirective
;    

UsingStaticDirective : 
    "using" "static" =>|| Name ";"
; 

UsingAliasDirective :
   "using" <IDENTIFIER> "=" =>|| Name ";"
;

UsingNamespaceDirective :
    "using" Name ";" =>||
;

GlobalAttributeSection :
   "["  ACTIVATE_TOKENS ASSEMBLY, MODULE ("assembly" | "module") =>|| ":" AttributeList [","] "]"
;

AttributeSection :
   "["
   [
      (<EVENT> |<RETURN> |<IDENTIFIER> )
      ":" =>||
      {String idImage = getToken(-1).getImage();}
      ASSERT {
         this.isParserTolerant()
         || idImage == null
         || idImage.equals("event")
         || idImage.equals("field")
         || idImage.equals("method")
         || idImage.equals("param")
         || idImage.equals("property")
         || idImage.equals("return")
         || idImage.equals("type")
      }
   ]
   AttributeList
   [","]
   "]"
;

AttributeList :
     Attribute ("," =>|+1 Attribute)*
;

Attribute :
   Name
   [AttributeArguments]
;

AttributeArguments :
    "(" 
    [
       SCAN ~(")" | <IDENTIFIER>"=")
       => [=>Type ":" ] Expression
       (
          ","
          [=>Type ":"] // since when?
          Expression
       )*
    ]
    [
       SCAN <IDENTIFIER> "="
       => NamedArgument
       (
          "," NamedArgument
       )*
    ]
    ")"  
;

NamedArgument :
    <IDENTIFIER> "=" Expression
;

/** Name of a Type or a Namespace */
Name :
   (
     QualifiedAliasMember
     |
     <IDENTIFIER>[TypeArgumentList]
   )
   (
      SCAN 2
      "." <IDENTIFIER> [TypeArgumentList]
   )*
;

QualifiedAliasMember :
   <IDENTIFIER> "::" =>|| <IDENTIFIER>
   [TypeArgumentList]
;

TypeArgumentList :
   "<"
   [
      (AttributeSection)*
      Type
      ("," (AttributeSection)* Type)* 
   ]
   DEACTIVATE_TOKENS RIGHT_SHIFT, RIGHT_SHIFT_ASSIGN 
   (">")
;

NamespaceDeclaration :
   "namespace"  QualifiedIdentifier NamespaceBody [";"]
;

QualifiedIdentifier :
    <IDENTIFIER> ("." <IDENTIFIER>)*
;

NamespaceBody :
   "{"
       (ExternAliasDirective)* 
       (UsingDirective)* 
       (
          NamespaceDeclaration 
          |
          TypeDeclaration
       )*
   "}"
;

TypeDeclaration :
  SCAN 0 {!checkNextTokenType(RBRACE) && !checkNextTokenType(EOF)}# =>
  (
   ClassDeclaration
   |
   StructDeclaration
   |
   InterfaceDeclaration
   |
   EnumDeclaration
   |
   DelegateDeclaration
  )
;
INJECT PARSER_CLASS :
{
   EnumSet<TokenType> permissibleModifiers;
}

Modifiers#void : //TODO
  (
    SCAN { permissibleModifiers == null 
         || 
         permissibleModifiers.contains(getToken(1).getType()) }#
      =>
      ("new"|"public"|"protected"|"internal"|"private"|"abstract"
      |"sealed"|"static"|"unsafe"|"override"|"virtual"|"extern"
      // This is allowed on methods in some cases,
      // but not sure where exactly or when this was added
      | "readonly"
      // Note that "ref" is only a permissible keyword for struct
      // since 7.3
      | "ref"
      // 
      | "readonly" // Have to check where this is possible and since when      
      )
      {
         if (permissibleModifiers != null) {
            permissibleModifiers.remove(getToken(0).getType());
         }
      }
     |
     SCAN { ((permissibleModifiers == null || permissibleModifiers.contains(ASYNC))
            && checkNextTokenImage("async"))
          }#
      => ACTIVATE_TOKENS ASYNC ("async")
      { if (permissibleModifiers!=null) permissibleModifiers.remove(ASYNC);}
  )*
;

ClassDeclaration :
  (AttributeSection)*
  Modifiers
  [SCAN {checkNextTokenImage("partial")}# => ACTIVATE_TOKENS PARTIAL ("partial")]
  "class"
  =>||
   <IDENTIFIER>
  [TypeParameterList]
  [":" (Name | "object" | "dynamic" | "string") ("," Name)*]
  TypeParameterConstraints
  "{"
   (ClassMemberDeclaration)*
  "}"
  [";"]
;

StructDeclaration :
   (AttributeSection)*
   Modifiers
  [SCAN {checkNextTokenImage("partial")}# => ACTIVATE_TOKENS PARTIAL ("partial")]
   "struct" 
   =>||
   <IDENTIFIER>
   [TypeParameterList]
   [":" Name ("," Name)*]
   TypeParameterConstraints
   "{" (ClassMemberDeclaration)* "}"
   [";"] 
;

InterfaceDeclaration :
   (AttributeSection)*
   Modifiers
   [SCAN {checkNextTokenImage("partial")}# => ACTIVATE_TOKENS PARTIAL ("partial")]
   "interface"
   =>||
   <IDENTIFIER>
   [TypeParameterList]
   [":" Name ("," Name)*]
   TypeParameterConstraints
   "{" 
   (InterfaceMemberDeclaration)* 
   "}"
   [";"]
;

InterfaceMemberDeclaration :
   InterfacePropertyDeclaration
   |
   InterfaceMethodDeclaration
   |
   InterfaceEventDeclaration
   |
   InterfaceIndexerDeclaration
; 

InterfaceEventDeclaration :
   (AttributeSection)*
   ["new"]
   "event" =>||
   Type
   <IDENTIFIER>
   ";"
;

InterfaceIndexerDeclaration :
   (AttributeSection)*
   ["new"]
   Type
   "this"
   "[" FormalParameters "]"
   "{" InterfaceAccessors "}"
;

EnumDeclaration : 
   (AttributeSection)*
   Modifiers
   "enum" 
   =>||
   <IDENTIFIER>
   [":" ("sbyte"|"byte"|"short"|"ushort"|"int"|"uint"|"long"|"ulong"|"char")]
   EnumBody
   [";"]
;

EnumBody#void :
   "{"
   [
      EnumMemberDeclaration
      ("," =>|+1 EnumMemberDeclaration)*
      [","]
   ]
   "}"
;

EnumMemberDeclaration :
   (AttributeSection)*
   <IDENTIFIER>
   ["=" Expression]
;

DelegateDeclaration :
   (AttributeSection)*
   Modifiers
  "delegate" 
  =>||
  ReturnType
  <IDENTIFIER>
  [TypeParameterList]
  "(" [FormalParameters] ")"
  TypeParameterConstraints
  ";"
;

TypeParameterConstraints :
  ACTIVATE_TOKENS WHERE
  (TypeParameterConstraint)*
;

TypeParameterConstraint :
   <WHERE>
   DEACTIVATE_TOKENS WHERE
   ( 
      <IDENTIFIER> 
      ":"
      (
         "new" "(" ")"
         |
         ("class"|"struct"|Name) (SCAN 2 "," Name)* ["," "new" "(" ")"]
      )
   )
;

ClassMemberDeclaration :
   ConstantDeclaration
   |
   MethodDeclaration 
   | 
   FieldDeclaration 
   | 
   PropertyDeclaration 
   | 
   EventDeclaration 
   | 
   IndexerDeclaration 
   |
   OperatorDeclaration 
   | 
   ConstructorDeclaration 
   |
   SCAN ~\StructDeclaration
   => DestructorDeclaration
   |
   SCAN \StructDeclaration 
   => StructMemberDeclarationUnsafe
   |
   StaticConstructorDeclaration 
   | 
   TypeDeclaration
;

StructMemberDeclarationUnsafe :
   (AttributeSection)*
   Modifiers
   "fixed"
   =>||
   Type
   (<IDENTIFIER> "[" Expression "]")+
   ";"
;

ConstantDeclaration :
   (AttributeSection)*
   ("new" | "public" | "protected" | "internal" | "private")*
   "const" 
   =>||
   Type 
   ConstantDeclarator ("," ConstantDeclarator)*
   ";"
;

ConstantDeclarator : <IDENTIFIER> "=" Expression ;

FieldDeclaration :
    (AttributeSection)*
    ("new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" | "unsafe")*
    Type
    =>|+2
    VariableDeclarator ("," VariableDeclarator)*
   ";"
;

PropertyDeclaration :
   (AttributeSection)*
   (
      "new"|"public"|"protected"|"internal"
      |"private"|"static"|"virtual"|"sealed"
      |"override"|"abstract"|"extern" | "unsafe"
      | "readonly" // REVISIT. When is this permissible?
   )*
   Type
   Name
   =>|+1
   PropertyBody
;

InterfacePropertyDeclaration :
   (AttributeSection)*
   ["new"]
   Type
   <IDENTIFIER>
   "{" 
   =>||
   InterfaceAccessors 
   "}"
;

InterfaceAccessors :
    (AttributeSection)* ACTIVATE_TOKENS GET ("get" ";") =>|| [(AttributeSection)* ACTIVATE_TOKENS SET ("set" ";")]
    |
    (AttributeSection)* ACTIVATE_TOKENS SET ("set" ";") =>|| [(AttributeSection)* ACTIVATE_TOKENS GET ("get" ";")]
    | 
    FAIL "Expecting getter or setter"
;

EventDeclaration :
   (AttributeSection)*
   Modifiers
   "event"
   =>||
   Type
   (
      VariableDeclarator =>|+1 ("," VariableDeclarator)* ";"
      |
      Name 
      "{" 
      (
          AddAccessorDeclaration RemoveAccessorDeclaration
          |
          RemoveAccessorDeclaration AddAccessorDeclaration
      )
      "}"
   )   
;

IndexerDeclaration :
    (AttributeSection)*
    Modifiers
    Type
    [Name "."] 
    "this"
    "["
    =>||
     FormalParameters 
    "]"
    (
       "{" AccessorDeclarations "}"
       |
       "=>" ["ref"] Expression ";"
    )    
;

OperatorDeclaration :
   (AttributeSection)*
   ( "public" | "static" | "extern" | "unsafe")+
   (Type | "implicit" | "explicit")
   "operator" =>||
   (
      ("+"|"-") "(" ["in"] Type <IDENTIFIER> ["," ["in"] Type <IDENTIFIER>] ")"
      |
      ("!"|"~"|"++"|"--"|"true"|"false") "(" ["in"] Type <IDENTIFIER> ")"
      |
      ("*"|"/"|"%"|"&"|"|"|"^"|"<<"|">>"|"=="|"!="|">"|"<"|">="|"<=")
      "(" ["in"] Type <IDENTIFIER> "," ["in"] Type <IDENTIFIER> ")"
      |
      Type "(" ["in"] Type <IDENTIFIER> ["=" Expression] ")" 
   )
   MethodBody
;

DestructorDeclaration :
   (AttributeSection)*
   ["extern" | "unsafe"]
   "~"
   <IDENTIFIER> 
   "(" 
   =>||
   ")"
   MethodBody
;

ConstructorDeclaration : 
   (AttributeSection)*
   Modifiers
   <IDENTIFIER>
   "(" =>||
   [FormalParameters]
   ")"
   [
      ":"
      ("base" | "this")
      "(" [ArgumentList] ")"
   ]
   MethodBody
;

StaticConstructorDeclaration :
   (AttributeSection)*
   (
      "extern" ["static"]
      |
      "static" ["extern"]
   )
   <IDENTIFIER>
   "(" =>||
   ")"
   MethodBody
;

ArgumentList : Argument ("," Argument)* ;

Argument :
   [=> <IDENTIFIER> ":"]
   (
       // Where is this specified?
      PrimitiveType ASSERT(","|")") =>||
      |
      => "out" Type <IDENTIFIER> // since C# 7.0
      |
      // Not sure since when "in" is allowed here
      ["ref" | "out" | "in"] Expression
   )
;

AddAccessorDeclaration :
    (AttributeSection)*
    ACTIVATE_TOKENS ADD ("add")
    =>||
    AccessorBody
;

RemoveAccessorDeclaration :
    (AttributeSection)*
    ACTIVATE_TOKENS REMOVE ("remove")
    =>||
    AccessorBody
;

AccessorDeclarations :
   GetAccessorDeclaration [SetAccessorDeclaration]
   |
   SetAccessorDeclaration [GetAccessorDeclaration]
;   

PropertyBody :
  "{" AccessorDeclarations "}"
   ["=" VariableInitializer ";"]
  |
  "=>" 
  ["ref"] // since 7.3, I think...
  Expression 
  ";"
;

GetAccessorDeclaration :
   (AttributeSection)*
   [
      "protected" ["internal"]
      | "internal" ["protected"]
      | "private" 
      | "readonly" // Only in a struct, I think. And since which version?
   ]
   ACTIVATE_TOKENS GET ("get") =>||
   AccessorBody
;

SetAccessorDeclaration :
   (AttributeSection)*
   [
      "protected" ["internal"]
      | "internal" ["protected"]
      | "private" 
   ]
   ACTIVATE_TOKENS SET ("set") =>||
   AccessorBody
;   

AccessorBody :
   Block 
   |
   "=>" ["ref"] Expression ";"
   |
   ";"
;

VariableInitializer :
   Expression
   | 
   ArrayInitializer
;

ArrayInitializer :
   "{"
      [VariableInitializer (SCAN 2 "," VariableInitializer)* [","]]
   "}"
;

MethodDeclaration :
   (AttributeSection)*
   Modifiers
   [SCAN {checkNextTokenImage("partial")}# => ACTIVATE_TOKENS PARTIAL ("partial")]
   ReturnType
   //MemberName
   Name
   [TypeParameterList]
   "(" 
   =>||
    [FormalParameters] 
   ")"
   TypeParameterConstraints
   MethodBody
;

MethodBody :
   Block 
   | 
   ["=>" ["ref"] Expression] ";"
;

InterfaceMethodDeclaration :
   (AttributeSection)*
   ["unsafe"] // REVISIT. 
   ["new"]
   ReturnType
   <IDENTIFIER>
   [TypeParameterList]
   "(" =>||
   [FormalParameters] 
   ")"
   TypeParameterConstraints
   ";"
;

ReturnType : 
   SCAN {getToken(2).getType() != STAR}# =>
   // If we have void*, we prefer to parse it as Type
   // for tree-building purposes.
   "void" ["*"] 
   | 
   Type 
;

FormalParameters :
   SCAN {checkNextTokenImage("__arglist")}
   =>ArgListParameter
   |
   ParameterArray
   |
   FixedParameter (=> "," FixedParameter)* ["," VarArgsParameter]
;

VarArgsParameter#void :
   ArgListParameter
   |
   ParameterArray
;   


ArgListParameter# :
    <IDENTIFIER>
    ASSERT {getToken(0).getImage().equals("__arglist")}
    =>||
;

FixedParameter :
   (AttributeSection)*
   ("ref"| "out" | "this"
    | "in" // since 7.2
   )*
   =>|+1
   Type
   <IDENTIFIER>
   ["=" Expression]
;

ParameterArray : 
   (AttributeSection)*
   "params" =>|| 
   ArrayType
   <IDENTIFIER>
;

VariableDeclarator : <IDENTIFIER> ["=" (Expression|ArrayInitializer)] ;   

TypeParameterList :
   "<"
   (AttributeSection)*
   ["in"|"out"] // Only with interfaces 
   Name
   ("," (AttributeSection)* ["in"|"out"] Name)*    
   ">"
;

NonArrayType#void : Type ;

ArrayType#void : Type ;

NonNullableType : Type;

Type :
    SCAN ~\TupleType
    => "void" ("*")+
    |
    (
      PrimitiveType 
      |
      Name
      |
      TupleType
   )
   [
      SCAN ~\NonNullableType
      => "?"
   ]
   ( 
      SCAN ~\NonArrayType =>
      "[" (",")* "]" 
   )*
   [
      SCAN 0 \ArrayType => 
      ASSERT {getToken(0).getType() == TokenType.RBRACKET}#
   ]
   (SCAN ~\TupleType => "*")*
;

TupleType :
   "("
   Type [<IDENTIFIER>] 
   ASSERT (",")
   =>||
   ("," Type [<IDENTIFIER>])*
   ")"
;

PrimitiveType#void :
   "bool" | "byte" | "char" | "decimal" | "double" | "float"
   | "int" | "long" | "object" | "sbyte" | "short" | "string"
   |"ushort"|"uint" |"ulong"
;

Block :
  "{"
   ( Statement )* 
  "}"
;

Expression#interface :
   SCAN QueryExpressionLA
   =>QueryExpression
   |
   LambdaExpression
   |
   AssignmentExpression
;

INJECT Expression :
{
   default boolean isAssignableTo() {return false;}
}

INJECT AdditiveExpression : implements Expression
INJECT AndExpression : implements Expression
INJECT ArrayCreationExpression : implements Expression
INJECT AnonymousMethodExpression : implements Expression
INJECT AnonymousObjectCreationExpression : implements Expression
INJECT AssignmentExpression : implements Expression
INJECT CheckedExpression : implements Expression
INJECT ConditionalExpression : implements Expression
INJECT ConditionalExpression : implements Expression
INJECT ConditionalAndExpression : implements Expression
INJECT ConditionalOrExpression : implements Expression
INJECT DefaultValueExpression : implements Expression
INJECT EqualityExpression : implements Expression
INJECT ExclusiveOrExpression : implements Expression
INJECT InclusiveOrExpression : implements Expression
INJECT InvocationExpression : implements Expression
INJECT LambdaExpression : implements Expression
INJECT Literal : implements Expression
INJECT LiteralExpression : implements Expression
INJECT MultiplicativeExpression : implements Expression
INJECT NullCoalescingExpression : implements Expression
INJECT NullConditionalExpression : extends UnaryExpression
INJECT ObjectCreationExpression : implements Expression
INJECT OrExpression : implements Expression
INJECT PrimitiveTypeAccess : implements Expression
INJECT RelationalExpression : implements Expression
INJECT ShiftExpression : implements Expression
INJECT TypeofExpression : implements Expression
INJECT QualifiedAliasMember : implements Expression
INJECT SizeofExpression : implements Expression
INJECT UncheckedExpression : implements Expression
INJECT UnaryExpression : implements Expression
INJECT PostDecrementExpression : extends UnaryExpression
INJECT PostIncrementExpression : extends UnaryExpression
INJECT PreDecrementExpression : extends UnaryExpression
INJECT PreIncrementExpression : extends UnaryExpression 
INJECT AwaitExpression : extends UnaryExpression
INJECT CastExpression : extends UnaryExpression
INJECT ThrowExpression : extends UnaryExpression
INJECT UnaryExpressionNotPlusMinus : extends UnaryExpression
INJECT UnaryExpressionPlusOrMinus : extends UnaryExpression

INJECT UnaryExpressionUnsafe : extends UnaryExpression
{
   public boolean isAssignableTo() {return true;}
}

INJECT BaseAccess : implements Expression 
{
   public boolean isAssignableTo() {return true;}
}

INJECT Tuple : implements Expression
{
   public boolean isAssignableTo() {return true;}
}

INJECT SimpleName : implements Expression
{
   public boolean isAssignableTo() {return true;}
}

INJECT This : implements Expression 
{
   public boolean isAssignableTo() {return true;}
}

INJECT MemberAccess : implements Expression 
{
   public boolean isAssignableTo() {return true;}
}

INJECT PointerMemberAccess : implements Expression 
{
   public boolean isAssignableTo() {return true;}
}

INJECT ElementAccess : implements Expression 
{
   public boolean isAssignableTo() {return true;}
}

LambdaExpression : LambdaLHS =>|| (Block | Expression) ;

LambdaLHS :
  [
     SCAN {checkNextTokenImage("async")}#
     => ACTIVATE_TOKENS ASYNC ("async")
  ]
  (
   =>ImplicitAnonymousFunctionSignature
   |
   ExplicitLambdaSignature
  )
  "=>"
;

ImplicitAnonymousFunctionSignature :
   <IDENTIFIER>
   |
   "(" [<IDENTIFIER> ("," <IDENTIFIER>)*] ")"
;

QueryExpressionLA#scan :
   <IDENTIFIER> ASSERT {getToken(0).getImage().equals("from")}
   (
      <IDENTIFIER> "in" 
      |
      Type <IDENTIFIER> "in" 
   )
;

QueryExpression :
   ACTIVATE_TOKENS ASCENDING,BY,DESCENDING,EQUALS,FROM,GROUP,JOIN,LET,
                   INTO, ON, ORDERBY,SELECT,WHERE
   (
     FromClause 
     QueryBody
   ) 
;

InQueryExpression#void :
   DEACTIVATE_TOKENS ASCENDING,BY,DESCENDING,EQUALS,FROM,
                   GROUP,JOIN,LET,INTO,
                   ON, ORDERBY,SELECT,WHERE
   (Expression)
;

FromClause :
   "from"
   (
      <IDENTIFIER> "in" =>|| InQueryExpression
      |
      Type <IDENTIFIER> "in" InQueryExpression 
   )
;

QueryBody :
   (QueryBodyClause)*
   (
      SelectClause
      |
      GroupClause
   )
   [
      "into" 
      <IDENTIFIER>
      QueryBody
   ]
;

QueryBodyClause :
   FromClause
   |
   LetClause
   |
   WhereClause
   |
   JoinClause
   |
   OrderbyClause
;

LetClause : "let" <IDENTIFIER> "=" InQueryExpression ;

WhereClause : "where" InQueryExpression ;

JoinClause : 
   "join" 
   (
      <IDENTIFIER> "in" 
      |
      Type <IDENTIFIER> "in"
   )
   InQueryExpression
   "on"
   InQueryExpression
   "equals"
   InQueryExpression
   ["into" <IDENTIFIER>]
;   

SelectClause : "select" InQueryExpression ;

GroupClause : "group" InQueryExpression "by" InQueryExpression;

OrderbyClause : 
    "orderby" 
    InQueryExpression 
    ["ascending"|"descending"] 
    (
       "," InQueryExpression ["ascending"|"descending"]
    )*
;    

AssignmentExpression :
   ConditionalExpression {Expression lhs = (Expression) peekNode();}
   [
      AssignmentOperator
      ASSERT {lhs.isAssignableTo()} : "Left-hand side is not assignable." :
      ["ref"] // since 7.0 ?
      Expression
   ]
;

MultiplicativeExpression : 
   UnaryExpression 
   (
      ("*" | "/" | "%") 
      UnaryExpression
   )*
;

AdditiveExpression :
   MultiplicativeExpression
   (
      ("+" | "-")
      MultiplicativeExpression
   )*
;

ShiftExpression :
   AdditiveExpression
   (
      ("<<" | ">>")
      AdditiveExpression
   )*
;

RelationalExpression :
   ShiftExpression
   (
      ("<"|">"|"<="|">=") ShiftExpression
      |
      => "is" "null" // Not sure this is supposed to work, but...
      |
      "is" Type
      ASSERT 
      {
         getToken(0).getType() != HOOK 
      // This is now really grotesque! 
      // If the Type we matched is "nullable", i.e. 
      // ends in a ?  // then the token after that must be
      // one of the following half dozen types
      // Otherwise we effectively backtrack
      // and match the Type as a NonNullableType,
      // i.e. we parse it without the trailing "?"
         || getToken(1).getType() == HOOK 
         || getToken(1).getType()== RPAREN 
         || getToken(1).getType() == SEMICOLON
         || getToken(1).getType() == EQ
         || getToken(1).getType() == SC_OR
         || getToken(1).getType() == SC_AND
      }# =>|| 
      [<IDENTIFIER>]
      |
      "is" NonNullableType [<IDENTIFIER>]
      |
      "as" Type
   )*
;

EqualityExpression :
   RelationalExpression
   (
      ("=="|"!=") 
      RelationalExpression
   )*
;

AndExpression :
   EqualityExpression
   (
      "&"
      EqualityExpression
   )*
;

ExclusiveOrExpression :
   AndExpression
   (
      "^"
      ExclusiveOrExpression
   )*
;

InclusiveOrExpression :
   ExclusiveOrExpression 
   (
      "|"
      ExclusiveOrExpression
   )*
;

ConditionalAndExpression :
   InclusiveOrExpression
   (
      "&&"
      InclusiveOrExpression
   )*
;

ConditionalOrExpression :
    ConditionalAndExpression
    (
       "||"
       ConditionalAndExpression
    )*
;

NullCoalescingExpression :
    ConditionalOrExpression
    (
       "??"
       ConditionalOrExpression
    )*
;

ConditionalExpression : 
   NullCoalescingExpression 
   [
      "?" ["ref"] Expression ":" ["ref"] Expression
   ] 
;

AssignmentOperator #void :
  "=" 
  | "+=" 
  | "-=" 
  | "*=" 
  | "/=" 
  | "%=" 
  | "&="
  | "|="
  | "^="
  | "<<="
  | ">>="
  | "??=" // since 8.0
;

UnaryExpression#abstract :
   UnaryExpressionPlusOrMinus
   |
   UnaryExpressionNotPlusMinus
   |
   CastExpression
   |
   AwaitExpression
   |
   ThrowExpression // since 7.0
   |
   PreIncrementExpression
   |
   PreDecrementExpression
   |
   UnaryExpressionUnsafe
   |
   NullConditionalExpression 
;

ThrowExpression# : "throw" [Expression] ;

CastExpression : "(" Type ")" =>|+1 UnaryExpression ;

AwaitExpression : 
   SCAN {checkNextTokenImage("await")}#
    => 
   ACTIVATE_TOKENS AWAIT ("await") UnaryExpression
;

UnaryExpressionUnsafe : ("*" | "&") UnaryExpression ;

PreIncrementExpression : "++" UnaryExpression ;

PreDecrementExpression : "--" UnaryExpression ;

UnaryExpressionPlusOrMinus : ("+" | "-") UnaryExpression ;

UnaryExpressionNotPlusMinus : ("!" | "~") UnaryExpression ;

NullConditionalOperations : 
   "?" =>|+1
   (
      "." <IDENTIFIER> [TypeArgumentList]
      |
      "[" ArgumentList "]"
   )
   (
      ["?"] "." =>|| <IDENTIFIER> [TypeArgumentList]
      |
      ["?"] "[" =>|| ArgumentList "]"
      |
      "(" [ArgumentList] ")"
   )*
;

NullConditionalExpression : PrimaryExpression [NullConditionalOperations] ;

PrimaryExpression#void :
   (
      ArrayCreationExpression
      |
      LiteralExpression
      |
      <INTERPOLATED_STRING_LITERAL> // TODO: deal with this better.
      |
      "this" #This
      |
      BaseAccess
      |
      PrimitiveTypeAccess
      |
      AnonymousMethodExpression
      |
      QualifiedAliasMemberAccess
      |
      SimpleName
      |
      ParenthesizedOrTuple
      |
      TypeofExpression
      |
      DefaultValueExpression
      |
      NameofExpression
      |
      CheckedExpression
      |
      SizeofExpression 
      |
      UncheckedExpression
      |
      ObjectCreationExpression
      |
      AnonymousObjectCreationExpression
   )
   (
    ("(" [ArgumentList] ")") #InvocationExpression(+1)
    |
    ("[" [=><IDENTIFIER> ":"] Expression ("," [=><IDENTIFIER>":"] Expression)*  "]") #ElementAccess(+1)
    |
    ("." <IDENTIFIER> [=>TypeArgumentList]) #MemberAccess(+1)
    |
    "->" <IDENTIFIER> #PointerMemberAccess(3)
    |
    "++" #PostIncrementExpression(2)
    |
    "--" #PostDecrementExpression(2)
   )*      
;   

ParenthesizedOrTuple#void :
    => ParenthesizedExpression
    |
    Tuple
;

ArrayCreationExpression :
    SCAN "new" [NonArrayType] "[" =>
    "new"
    (
       RankSpecifier ArrayInitializer
       |
       NonArrayType "[" =>|+1 Expression ("," Expression)* "]" (RankSpecifier)* [ArrayInitializer]
       |
       ArrayType ArrayInitializer
    )
;

ObjectCreationExpression :
   "new" =>|+1 [NonArrayType] // This seems possible since C# 9
   (
      "(" [ArgumentList] ")" [ObjectInitializer | CollectionInitializer]
      |
      (ObjectInitializer | CollectionInitializer)
   )
;

AnonymousObjectCreationExpression :
   "new" 
   "{" =>||
    [MemberDeclarator ("," MemberDeclarator)* [","]]
   "}"
;


RankSpecifier : "[" (",")* "]" ;

Tuple :
   "("
   TupleElement =>|+1
   (
      "," TupleElement
   )+
   ")"
;

TupleElement :
   [=> <IDENTIFIER> ":"]
   (
       =>Expression ASSERT ("," | ")")
       |
       =>Type Expression ASSERT ("," | ")")
   ) 
   =>||
;

PrimitiveTypeAccess :
   ("dynamic" | PrimitiveType)
   "." =>||
   <IDENTIFIER>
   [ => TypeArgumentList ]
;   

QualifiedAliasMemberAccess :
   <IDENTIFIER> "::" =>|| 
   <IDENTIFIER> [TypeArgumentList]
;
   


BaseAccess :
   "base"
   (
     "." <IDENTIFIER> [TypeArgumentList]
     |
    "[" Expression ("," Expression)* "]"
   )
;

NameofExpression : "nameof" "(" NamedEntity ")" ;

NamedEntity :
   (SimpleName | "this"| "base" | PredefinedType | QualifiedAliasMember)
   ("." <IDENTIFIER> [TypeArgumentList])+
;   

PredefinedType#void :
    "bool" | "byte" | "char"| "decimal" | "double" | "float" | "int" 
    | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort"
;

// The "(Type)" part is optional (since C# 7.1)
// if it can be inferred by the compiler.
DefaultValueExpression# : "default" [ "(" Type ")" ] ;

SimpleName# : <IDENTIFIER> [=>TypeArgumentList] ;

ParenthesizedExpression : "(" Expression ")" ;

INJECT ParenthesizedExpression : implements Expression 
{
   public boolean isAssignableTo() {
      return ((Expression) getChild(1)).isAssignableTo();
   }
}

TypeofExpression :
    "typeof" "("
    (
       "void"
       |
   // The following expansion is a little bit tricky.
   // If our initial scanahead doesn't find any
   // any empty type args, like <,,,> sort of things,
   // then the assertion at the end fails, and this means
   // that we go to the next choice, which is
   // a regular Type production (with no funky <,,> thingies
       =>UnboundTypeName ASSERT {sawEmptyTypeArgs}#
       |
       Type
    )
    ")"
;

INJECT PARSER_CLASS : {boolean sawEmptyTypeArgs = false;}

UnboundTypeName :
   {sawEmptyTypeArgs = false;}#
   [=> <IDENTIFIER> "::"]
   <IDENTIFIER>
   ["<" (",")* ">" {sawEmptyTypeArgs = true;}#]
   (
      "."
      <IDENTIFIER>
      ["<" (",")* ">" {sawEmptyTypeArgs = true;}#]
   )*
;

MemberDeclarator :
    <IDENTIFIER> "=" =>|| Expression
    |
    PrimaryExpression // TODO ensure that it is of the right type
;


AnonymousMethodExpression :
   [
      SCAN {checkNextTokenImage("async")}
      => ACTIVATE_TOKENS ASYNC ("async")
   ]
   "delegate"
   =>||
   [
      "("
      [ExplicitAnonymousFunctionSignature]
      ")"
   ]
   Block
;

ExplicitAnonymousFunctionSignature : 
   ExplicitAnonymousFunctionParameter 
   ("," ExplicitAnonymousFunctionParameter)*
; 

ExplicitLambdaSignature :
   "(" 
       ExplicitAnonymousFunctionSignature
   ")"
;

ExplicitAnonymousFunctionParameter :  ["ref"|"out"|"in"] Type <IDENTIFIER> ;

ObjectInitializer :
  SCAN "{" (<IDENTIFIER> | "[" ArgumentList "]") "="
  =>
  "{" 
  MemberInitializer (SCAN 2 "," MemberInitializer)* [","]
  "}"
;

MemberInitializer :
   (<IDENTIFIER> | "[" ArgumentList "]")
   [
      // If this is really optional, it is a mistake in the spec. 
      // At least the C# 6.0 spec
     "="
     (Expression | ObjectInitializer | CollectionInitializer)
   ]
;

CollectionInitializer : 
   "{" 
       [
          ElementInitializer ("," =>|+1 ElementInitializer)* [","]
       ]
   "}"
;

ElementInitializer :
    "{" Expression ("," Expression)* "}"
    |
    Expression // non-assignment, deal with later
;

CheckedExpression : "checked" "(" Expression ")" ;

UncheckedExpression : "unchecked" "(" Expression ")" ;

SizeofExpression : "sizeof" "(" Type ")" ;

LiteralExpression# :
   "true"
   |
   "false"
   |
   "null"
   |
   <INTEGER_LITERAL>
   |
   <REAL_LITERAL>
   |
   <CHARACTER_LITERAL>
   |
   <STRING_LITERAL>
;   

Label : SCAN 2 <IDENTIFIER> ":" ;

Statement :
   (Label)*
    (
       // REVISIT this
       SCAN {!checkNextTokenImage("await")}#
       =>
       MethodDeclaration
       |
       LocalConstantDeclaration ";" 
       |
       LocalVariableDeclaration ";"
       |
       EmbeddedStatement
    )
;

EmptyStatement : ";" ;

EmbeddedStatement :
    Block 
    |
    EmptyStatement
    |
    IfStatement
    |
    WhileStatement
    |
    DoStatement
    |
    YieldStatement
    |
    CheckedStatement
    |
    UncheckedStatement
    |
    TryStatement
    |
    BreakStatement
    |
    ContinueStatement
    |
    GotoStatement
    |
    ReturnStatement
    |
    ThrowStatement
    |
    UnsafeStatement
    |
    UsingStatement
    |
    LockStatement
    |
    FixedStatement
    |
    SwitchStatement
    |
    ForStatement
    |
    ForeachStatement
    |
    ExpressionStatement
;

LocalVariableDeclarationLA#scan :
   ASSERT {!checkNextTokenImage("await")} // Is there any possibility that a local type is named "await"?
   ["ref"] ["readonly"]
   (
      (
         <IDENTIFIER> ASSERT {getToken(0).getImage().equals("var")}
         (<IDENTIFIER>|Tuple) "="
      )
      |
      (
         Type <IDENTIFIER> ("="|";"|",")
      )
   )
;

LocalVariableDeclaration : 
  SCAN LocalVariableDeclarationLA =>
  (
     VarDeclaration
     |
     NoVarDeclaration
  )
;   

NoVarDeclaration :
   [
      "ref" // since C# 7.0
   ]
   [
      "readonly" //REVISIT
   ]
   Type 
   ASSERT {getToken(-1).getType() == DOT || !getToken(0).toString().equals("await")}#
   =>|+1
   LocalVariableDeclarator
   ("," LocalVariableDeclarator)*
;

VarDeclaration :
   [
      "ref" // since C# 7.0
   ]
   [
      "readonly" //REVISIT
   ]
   ACTIVATE_TOKENS VAR ("var") 
   =>||
   (<IDENTIFIER>|Tuple) "=" LocalVariableInitializer
;

LocalVariableDeclarator : 
   <IDENTIFIER> ["=" ["ref"] LocalVariableInitializer] 
;

LocalVariableInitializer :  
   Expression 
   | 
   ArrayInitializer 
   | 
   StackAllocInitializer
;

StackAllocInitializer :
   "stackalloc" 
   (
      "[" "]" ArrayInitializer
      |
      Type
      (
         SCAN 0 {getToken(0).getType() != RBRACKET}#
         => "[" Expression "]" 
         |
         "[" Expression "]"
         |
         {}
      )
      [ArrayInitializer]
   )
;

LocalConstantDeclaration :
   "const"
   Type
   ConstantDeclarator
   ("," ConstantDeclarator)*
;

CheckedStatement : "checked" =>|+1 Block ;

UncheckedStatement : "unchecked" =>|+1 Block ;

BreakStatement : "break" ";" ;

ContinueStatement : "continue" ";" ;

GotoStatement : 
   "goto"
   (
      <IDENTIFIER>
      |
      "default" #DefaultValueExpression
      |
      "case" Expression
   )
   ";"
;   

IfStatement : "if" "(" Expression ")" EmbeddedStatement [ "else" EmbeddedStatement] ;

DoStatement : "do" EmbeddedStatement "while" "(" Expression ")" ";" ;

WhileStatement : "while" "(" Expression ")" EmbeddedStatement ;

ForeachStatement : "foreach" "(" ("var" | Type) <IDENTIFIER> "in" Expression ")" EmbeddedStatement ;

TryStatement : 
   "try" Block
   (
      FinallyClause
      |
      (CatchClause)+ [FinallyClause]
   )
;

ReturnStatement : 
   "return" 
   [
      [
         // since 7.0. Note that this can only happen in a return statement
         // in a method that was itself declared using ref
         // However, I don't think this is our problem. At least for now.
         // We leave it to the compiler!
         "ref"
      ] 
      Expression 
   ] 
   ";" 
;

ThrowStatement : ThrowExpression ";" ;

FinallyClause : "finally" Block ;

UnsafeStatement : "unsafe" Block ; 

CatchClause : 
   "catch" 
   [ "(" Type [<IDENTIFIER>] ")" ] 
   [ ACTIVATE_TOKENS WHEN ("when") =>|| "(" Expression ")" ] 
   Block
;

YieldStatement :
   SCAN {checkNextTokenImage("yield")}#
   => ACTIVATE_TOKENS YIELD ("yield")
   (
      "break"
      |
      "return" Expression
   )
   ";"
;   

UsingStatement :
   "using"
   "("
   (
      SCAN LocalVariableDeclaration ")"
      => LocalVariableDeclaration 
      | 
      Expression
   )
   ")"
   EmbeddedStatement
;

LockStatement : "lock" "(" Expression ")" EmbeddedStatement ;

FixedStatement :
   "fixed"
   "(" =>||
   Type ASSERT {getToken(0).getType() == STAR}
   FixedPointerDeclarator ("," FixedPointerDeclarator)*
   ")"
   EmbeddedStatement
; 

FixedPointerDeclarator : 
   <IDENTIFIER> 
   "=" 
   (
      ["&"] Expression
      |
      StackAllocInitializer
   )
;

StatementExpression#void :
   PreIncrementExpression
   |
   PreDecrementExpression
   |
   AwaitExpression
   |
   PrimaryExpression
   {Expression lhs = (Expression) peekNode();} 
   (
      NullConditionalOperations #NullConditionalExpression(2)
      |
      SCAN 1 {lhs.isAssignableTo()}
      => AssignmentOperator Expression #AssignmentExpression(3)
      |
      ASSERT 
      {
         lhs instanceof InvocationExpression
         |
         lhs instanceof ObjectCreationExpression
         |
         lhs instanceof PostDecrementExpression
         |
         lhs instanceof PostIncrementExpression
      }
      : "Not a statement"
   )
   |
   AssignmentExpression 
   ASSERT {peekNode() instanceof AssignmentExpression} : "Not a statement"
;

ExpressionStatement : StatementExpression ";" ;

SwitchStatement : "switch" "(" Expression ")" SwitchBlock ; 

SwitchBlock : "{" (SwitchSection)* "}" ; 

SwitchLabel : 
   CaseLabel
   |
   "default" ":"
; 

CaseLabel :
   "case"
   (
      Type <IDENTIFIER> =>|| [WhenClause] ":"
      |
      Expression [WhenClause] ":"
   )
;

WhenClause :
   SCAN 0 {getToken(1).getImage().equals("when")}#
   => 
   ACTIVATE_TOKENS WHEN ("when")
   Expression
;

SwitchSection : 
   (SwitchLabel)+ 
   (
      SCAN 0 {
         // A bit ugly. Really need to make syntactic lookahead a bit more powerful 
         // in terms of negative conditions! 
                getToken(1).getType() != RBRACE
                && getToken(1).getType() != CASE 
                && !(getToken(1).getType() == DEFAULT && getToken(2).getType() == COLON)
             } 
      => Statement
   )+ 
;  

ForStatement : 
   "for" 
   "("
   [LocalVariableDeclaration | StatementExpression ("," StatementExpression)*]
   ";"
   [Expression]
   ";"
   [
      StatementExpression
      ("," StatementExpression)*
   ]
   ")"
   EmbeddedStatement
;
