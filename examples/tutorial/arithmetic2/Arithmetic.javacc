SKIP : " " | "\t" | "\n" | "\r" ;

TOKEN : 
   <PLUS : "+">
   |
   <MINUS : "-">
   |
   <TIMES : "*">
   |
   <DIVIDE : "/">
   |
   <OPEN_PAREN : "(">
   |
   <CLOSE_PAREN : ")">
   |
   <NUMBER :  (["0"-"9"])+ ("."(["0"-"9"])+)?>
;

INJECT PARSER_CLASS : 
{
    static public void main(String[] args) throws ParseException {
       ArithmeticParser parser = new ArithmeticParser(new InputStreamReader(System.in));
       parser.Root();
       Node root = parser.rootNode();
       System.out.println("Dumping the AST...");
       root.dump();
       System.out.println("The result is: " + root.evaluate());
    }
}

INJECT Node : 
{
    default double evaluate() {throw new UnsupportedOperationException();}
}

INJECT NUMBER : 
{
    public double evaluate() {
        return Double.parseDouble(getImage());
    }
}

AdditiveExpression : 
    MultiplicativeExpression
    (
      (<PLUS>|<MINUS>)
      MultiplicativeExpression
    )*
;

INJECT AdditiveExpression :
{
    public double evaluate() {
        double result = getChild(0).evaluate();
        for (int i=1; i< getChildCount(); i+=2) {
            Node operator = getChild(i);
            double nextOperand = getChild(i+1).evaluate();
            if (operator instanceof MINUS) {
                result -= nextOperand;
            } else {
                result += nextOperand;
            }
        }
        return result;
    }
}

MultiplicativeExpression :
    (<NUMBER> | ParentheticalExpression)
    (
       (<TIMES>|<DIVIDE>)
       (<NUMBER> | ParentheticalExpression)
    )*
;

INJECT MultiplicativeExpression :
{
    public double evaluate() {
        double result = getChild(0).evaluate();
        for (int i=1; i< getChildCount(); i+=2) {
            Node operator = getChild(0);
            double nextOperand = getChild(i+1).evaluate();
            if (operator instanceof DIVIDE) {
                result /= nextOperand;
            } else {
                result *= nextOperand;
            }
        }
        return result;
    }
}

ParentheticalExpression :
    <OPEN_PAREN>
    AdditiveExpression
    <CLOSE_PAREN>
;

INJECT ParentheticalExpression : 
{
    public double evaluate() {
        return getChild(1).evaluate();
    }
}

Root : AdditiveExpression <EOF> ;

INJECT Root : 
{
    public double evaluate() {
        return getChild(0).evaluate();
    }
}

