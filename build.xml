<project name="javacc21" default="compile" basedir=".">
	<tstamp>
		<format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>

	<target name="init">
		<echo>Join the JavaCC 21 Discussion forum at: https://parsers.org/</echo>
		<echo>Send any bug report to bugs@javacc.com and include the following information.</echo>
		<echo>JDK Version: ${java.version} on ${os.name}</echo>

		<uptodate property="parser.notuptodate" targetfile="src/main/grammars/JavaCC.javacc">
			<srcfiles dir="src/main/java/com/javacc" includes="*.java" />
		</uptodate>

		<uptodate property="preprocessor.notuptodate" targetfile="examples/preprocessor/Preprocessor.javacc">
			<srcfiles dir="src/main/java/com/javacc/preprocessor/" includes="*.java" />
		</uptodate>

	</target>

	<target name="restore-bootstrap-jar">
		<exec executable="git" dir="${basedir}">
			<arg line="checkout bin/javacc.jar" />
		</exec>
	</target>


	<!-- 
     Build and test using the bootstrap jarfile, then 
     drop in the newly built jarfile and build and test again
-->
	<target name="full-test" depends="restore-bootstrap-jar,clean,jar,test">
		<echo>Now we copy the new javacc.jar to bin to rebootstrap</echo>
		<copy file="javacc.jar" todir="bin" />
		<antcall target="clean" />
		<antcall target="test" />
	</target>

	<target name="clean">
		<delete file="javacc.jar" />
		<delete file="javacc-full.jar" />
		<delete dir="build" />
		<delete dir="src/main/java/com/javacc/parser" />
		<delete dir="src/main/java/com/javacc/preprocessor" />
		<mkdir dir="src/main/java/com/javacc/parser" />
		<mkdir dir="src/main/java/com/javacc/preprocessor" />
		<delete dir="examples/java/com" />
		<delete dir="examples/freemarker/fel" />
		<delete dir="examples/freemarker/ftl" />
		<delete dir="examples/json/com" />
		<delete dir="examples/preprocessor/com/" />
	</target>


	<target name="parser-gen" depends="init" if="parser.notuptodate">
		<echo>Using Bootstrap JavaCC to regenerate JavaCC parser</echo>
		<java jar="bin/javacc.jar" fork="true" failonerror="true">
			<assertions>
				<enable />
			</assertions>
			<arg line="-n -q -d ../java src/main/grammars/JavaCC.javacc" />
		</java>
	</target>
	<target name="preprocessor-gen" depends="init" if="preprocessor.notuptodate">
		<echo>Using Bootstrap JavaCC to regenerate preprocessor</echo>
		<java jar="bin/javacc.jar" fork="true" failonerror="true">
			<assertions>
				<enable />
			</assertions>
			<arg line="-n -q -d ../../src/main/java examples/preprocessor/Preprocessor.javacc" />
		</java>
	</target>

	<target name="compile" depends="parser-gen, preprocessor-gen">
		<mkdir dir="build" />
		<javac srcdir="src/main/java"
		       destdir="build"
		       deprecation="off"
		       debug="on"
		       optimize="off"
		       classpath="bin/freemarker.jar"
		       includeantruntime="no"
		       failonerror="true"
		       fork="true"
		       target="1.8"
		       source="1.8"
		/>
		<copy todir="build/templates/java">
			<fileset dir="src/main/resources/templates/java">
				<include name="*.ftl" />
			</fileset>
		</copy>
		<copy todir="build/include/java">
			<fileset dir="examples/java">
				<include name="*.javacc" />
			</fileset>
		</copy>
		<copy todir="build/include/preprocessor">
			<fileset dir="examples/preprocessor">
				<include name="*.javacc" />
			</fileset>
		</copy>
		<copy todir="build/include/json">
			<fileset dir="examples/json">
				<include name="*.javacc" />
			</fileset>
		</copy>
		<copy todir="build">
			<fileset dir="src/main/resources">
				<include name="*.properties" />
			</fileset>
		</copy>
	</target>


	<target name='docs'>
		<ant antfile="build.xml" dir="src/docs" target="docs" />
	</target>


	<target name="test" depends="jar">
		<echo>Testing the JSON Parser</echo>
		<ant antfile="build.xml" dir="examples/json" target="clean" />
		<ant antfile="build.xml" dir="examples/json" target="test" />
		<echo>Testing the Preprocessor</echo>
		<ant antfile="build.xml" dir="examples/preprocessor" target="clean" />
		<ant antfile="build.xml" dir="examples/preprocessor" target="test" />
		<echo>Testing the Java parser standalone</echo>
		<ant antfile="build.xml" dir="examples/java" target="clean" />
		<ant antfile="build.xml" dir="examples/java" target="test" />
		<echo>Testing the newer FreeMarker parser</echo>
		<ant antfile="build.xml" dir="examples/freemarker" target="clean" />
		<ant antfile="build.xml" dir="examples/freemarker" target="test" />
		<echo>Running through the crufty old legacy examples</echo>
		<ant antfile="build.xml" dir="examples/legacy" target="test" />
	</target>

	<target name="jar" depends="compile">
		<echo>Creating basic jarfile, using this requires a freemarker.jar in the same directory</echo>
		<jar jarfile="javacc.jar" basedir="build" compress="true">
			<manifest>
				<attribute name="Main-Class" value="com.javacc.Main" />
				<attribute name="Class-Path" value="freemarker.jar bin/freemarker.jar" />
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Build-Date" value="${timestamp}" />
			</manifest>
		</jar>
		<!--chmod file="javacc.jar" perm="+x"/-->
	</target>

	<target name="full-jar" depends="compile">
		<echo>Creating the "uber-jar" with all dependencies, i.e. the FreeMarker classes</echo>
		<jar jarfile="javacc-full.jar" compress="true">
			<fileset dir="build" />
			<zipfileset includes="**/*.class" src="bin/freemarker.jar" />
			<manifest>
				<attribute name="Main-Class" value="com.javacc.Main" />
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Build-Date" value="${timestamp}" />
			</manifest>
		</jar>
		<chmod file="javacc-full.jar" perm="+x" />
	</target>

</project>
